'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = undefined;

/**
 * 主页
 */
var index = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, next) {
    var port, data, image;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // 默认展示二维码
            port = context.app.server.address().port;
            data = (0, _service.getServerAddress)(port);
            image = _qrImage2.default.image(data, { size: 9 });

            context.type = 'image/png';
            context.body = image;
            _context.next = 7;
            return next();

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function index(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * 下载rpk
 */


var bundle = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(context, next) {
    var projectPath, projectName, projectDist, projectRpk1, projectRpk2;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            projectPath = process.cwd();
            projectName = (0, _service.getProjectName)();
            projectDist = _path2.default.join(projectPath, 'dist');
            projectRpk1 = _path2.default.join(projectDist, projectName + '.debug.rpk');
            projectRpk2 = _path2.default.join(projectDist, projectName + '.release.rpk');


            if (_fs2.default.existsSync(projectRpk1)) {
              context.body = _fs2.default.createReadStream(projectRpk1);
              context.set('Content-Type', 'text/plain');
            } else if (_fs2.default.existsSync(projectRpk2)) {
              context.body = _fs2.default.createReadStream(projectRpk2);
              context.set('Content-Type', 'text/plain');
            } else {
              _utils.colorconsole.error('### App Server ### \u9879\u76EEdist\u76EE\u5F55\u4E0B\u4E0D\u5B58\u5728rpk\u6587\u4EF6\uFF1A' + projectDist);
              context.throw('404', '\u65E0\u6CD5\u627E\u5230\u9879\u76EE\u7684rpk\u6587\u4EF6');
            }

            _context2.next = 8;
            return next();

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function bundle(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * 记录最新的用户进入的请求
 */


var logger = exports.logger = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(context, next) {
    var pathClientLog, _getClientFromRequest, sn, clientIp, linkMode, client;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;

            // 文件路径
            pathClientLog = context.conf.defaults.pathClientLog;
            _getClientFromRequest = (0, _service.getClientFromRequest)(context.request), sn = _getClientFromRequest.sn, clientIp = _getClientFromRequest.clientIp, linkMode = _getClientFromRequest.linkMode;
            client = {
              sn: sn,
              ip: clientIp,
              port: CLIENT_PORT
            };
            _context3.t0 = linkMode;
            _context3.next = _context3.t0 === _service.LINK_MODE.WIFI ? 7 : _context3.t0 === _service.LINK_MODE.ADB ? 10 : 13;
            break;

          case 7:
            _utils.colorconsole.info('### App Server ### \u8BB0\u5F55\u4ECE' + clientIp + '\u8FDB\u5165\u7684HTTP\u8BF7\u6C42');
            (0, _service.recordClient)(pathClientLog, client);
            return _context3.abrupt('break', 13);

          case 10:
            // ADB模式下需要先读取连接时记录的信息
            client = (0, _service.getRecordClient)(pathClientLog, sn, clientIp);
            if (client) {
              _utils.colorconsole.info('### App Server ### \u8BB0\u5F55\u4ECE\u8BBE\u5907(' + sn + ')\u8FDB\u5165\u7684HTTP\u8BF7\u6C42');
              (0, _service.recordClient)(pathClientLog, client);
            } else {
              _utils.colorconsole.warn('### App Server ### \uFF1A\u8BB0\u5F55\u8BBE\u5907(' + sn + ')\u5931\u8D25');
            }
            return _context3.abrupt('break', 13);

          case 13:
            _context3.next = 15;
            return next();

          case 15:
            _context3.next = 20;
            break;

          case 17:
            _context3.prev = 17;
            _context3.t1 = _context3['catch'](0);

            _utils.colorconsole.error('### App Server ### \u8BB0\u5F55log\u51FA\u9519: ' + _context3.t1.message);

          case 20:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 17]]);
  }));

  return function logger(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * 二维码api
 */


var qrCode = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(context, next) {
    var port, data, image;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            port = context.app.server.address().port;
            data = (0, _service.getServerAddress)(port);
            image = _qrImage2.default.image(data, { size: 9 });
            _context4.next = 5;
            return next();

          case 5:
            context.type = 'image/png';
            context.body = image;

          case 7:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function qrCode(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _qrImage = require('qr-image');

var _qrImage2 = _interopRequireDefault(_qrImage);

var _service = require('../service');

var _utils = require('../lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright (C) 2017, hapjs.org. All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var CLIENT_PORT = 39517;exports.default = {
  index: index,
  bundle: bundle,
  qrCode: qrCode,
  logger: logger
};