/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _utils = require('../../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REGEXP_INT = /^[-+]?[0-9]+$/;
var REGEXP_URL = /^['"]?([^()]+?)['"]?$/gi;
var REGEXP_NAME = /^[a-zA-Z_][a-zA-Z0-9]*$/;

var validator = {
  integer: function integer(v) {
    v = (v || '').toString();
    if (v.match(REGEXP_INT)) {
      return { value: true };
    }
    return {
      value: false,
      reason: function reason(k, v) {
        return 'ERROR: manifest.json的配置项 `' + k + '` 的值 `' + v + '` 无效(仅支持整数)';
      }
    };
  },
  object: function object(v) {
    var r = (0, _utils.isPlainObject)(v);
    return {
      value: (0, _utils.isPlainObject)(v),
      reason: r ? null : function reason(k, v) {
        return 'ERROR: manifest.json的配置项 `' + k + '` 的值 `' + v + '` 无效(仅支持对象)';
      }
    };
  },
  url: function url(v) {
    v = (v || '').toString().trim();
    var url = v.match(REGEXP_URL);
    if (url) {
      return { value: true };
    }

    return {
      value: false,
      reason: function reason(k, v) {
        return 'ERROR: manifest.json的配置项 `' + k + '` 的值 `' + v + '` 必须是url';
      }
    };
  },
  name: function name(v) {
    v = (v || '').toString();
    if (v.match(REGEXP_NAME)) {
      return { value: true };
    }

    return {
      value: false,
      reason: function reason(k, v) {
        return 'ERROR: manifest.json的配置项 `' + k + '` 的值 `' + v + '` 格式不正确';
      }
    };
  }
};

var validatorMap = {
  package: {
    type: validator.string,
    require: true
  },
  name: {
    type: validator.string,
    require: true
  },
  versionCode: {
    type: validator.integer,
    require: true
  },
  icon: {
    type: validator.url,
    require: true
  },
  config: {
    type: validator.object,
    require: true
  },
  router: {
    type: validator.object,
    require: true
  }

  /**
   * 校验属性
   * @param name
   * @param value
   * @returns {{value: *, log: *}}
   */
};function validate(name, value) {
  var result = void 0,
      log = void 0;
  var validator = validatorMap[name];

  if (validator && typeof validator.type === 'function') {
    result = validator.type(value);
    if (result.reason) {
      log = { reason: result.reason(name, value) };
    }
  } else {
    result = { value: true // 无校验，默认合法
    };
  }

  return {
    value: result.value,
    log: log
  };
}

// 缺省属性
var requireAttrMap = [];
(function initRules() {
  Object.keys(validatorMap).forEach(function (name) {
    var info = validatorMap[name];
    if (info.require) {
      requireAttrMap.push(name);
    }
  });
})();

module.exports = function (source) {
  this.cacheable && this.cacheable();

  var loaderQuery = _loaderUtils2.default.parseQuery(this.query);
  // 获取query参数
  var srcpath = loaderQuery.path;
  var manifestPath = _path2.default.join(_path2.default.dirname(srcpath), 'manifest.json');
  // 读取manifest文件
  var manistr = this.fs.readFileSync(manifestPath);
  var manifest = JSON.parse(manistr);
  var logs = [];
  if (manifest) {
    // 检测必填属性
    requireAttrMap.forEach(function (name) {
      if (!manifest[name]) {
        logs.push({
          line: 1,
          column: 1,
          reason: 'ERROR: manifest.json缺少配置项 `' + name + '`'
        });
      }
    });

    // 校验属性值
    var value = void 0,
        result = void 0;
    Object.keys(manifest).forEach(function (key) {
      value = manifest[key];
      result = validate(key, value);
      if (result.log) {
        logs.push({
          line: 1,
          column: 1,
          reason: result.log.reason
        });
      }
    });

    // 输出日志
    (0, _utils.logWarn)(this, logs);

    source += '\n(exports.default || module.exports).manifest = ' + JSON.stringify(manifest) + ';\n';

    // 放置到NodeJS全局
    global.framework.manifest = manifest;
  }
  return source;
};