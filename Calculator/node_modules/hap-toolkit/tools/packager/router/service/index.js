'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LINK_MODE = exports.getRecordClient = exports.getClientFromRequest = exports.getServerAddress = exports.recordClient = exports.getProjectName = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _utils = require('../lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LINK_MODE = {
  NULL: 0,
  WIFI: 1,
  ADB: 2

  /**
   * 获取开发者项目中的项目名称
   */
}; /**
    * Copyright (C) 2017, hapjs.org. All rights reserved.
    */

function getProjectName() {
  try {
    var pathProject = process.cwd();
    var pathManifest = _path2.default.join(pathProject, 'src', 'manifest.json');
    var contManifest = require(pathManifest);
    return contManifest && contManifest.package || 'Bundle';
  } catch (err) {
    _utils.colorconsole.error('### App Server ### \u83B7\u53D6\u9879\u76EE\u540D\u79F0\u51FA\u9519\uFF1A' + err.message);
  }
}

/**
 * 记录地址
 * @param filePath {String}
 * @param newClient {sn, ip, port}
 *
 */
function recordClient(filePath, newClient) {
  // 目录存在
  var pathParentDir = _path2.default.dirname(filePath);

  var tmpJSONData = { clients: [] };
  if (!_fs2.default.existsSync(pathParentDir)) {
    (0, _utils.mkdirsSync)(pathParentDir);
  } else if (_fs2.default.existsSync(filePath)) {
    tmpJSONData = JSON.parse(_fs2.default.readFileSync(filePath).toString());
    if (tmpJSONData.clients instanceof Array) {
      // 过滤相同的记录
      tmpJSONData.clients = tmpJSONData.clients.filter(function (client) {
        return client.ip !== newClient.ip || client.port !== newClient.port;
      });
      // 保留最后的4条记录，最多记录5条
      while (tmpJSONData.clients.length > 4) {
        tmpJSONData.clients.shift();
      }
    }
  }
  // 写入文件
  tmpJSONData.clients.push(newClient);
  _fs2.default.writeFileSync(filePath, JSON.stringify(tmpJSONData));
}

/**
 * 获取可被其它设备访问的服务器地址， 如："http://172.20.1.1:8080"
 * @param port {Number}
 * @return {string}
 */
function getServerAddress(port) {
  return 'http://' + (0, _utils.getIPv4IPAddress)() + (port === 80 ? '' : ':' + port);
}
/**
 * 根据设备sn和ip获取设备的记录
 * @param filePath
 * @param sn
 * @param ip
 * @returns {null}
 */
function getRecordClient(filePath, sn, ip) {
  if (_fs2.default.existsSync(filePath)) {
    var _JSON$parse = JSON.parse(_fs2.default.readFileSync(filePath).toString()),
        clients = _JSON$parse.clients;

    clients = clients instanceof Array ? clients : [];
    return clients.find(function (client) {
      return client.sn === sn && client.ip === ip && client.port;
    });
  }
}
/**
 * 获取请求信息
 * @param request
 * @returns {{clientIp: (any|*|string), sn, linkMode}}
 */
function getClientFromRequest(request) {
  var clientIp = (0, _utils.getClientIPAddress)(request);
  var serverIp = (0, _utils.getIPv4IPAddress)();
  var sn = request.header['device-serial-number'];
  var linkMode = LINK_MODE.NULL;
  if (clientIp === '127.0.0.1' && sn) {
    linkMode = LINK_MODE.ADB;
  } else if (clientIp !== '127.0.0.1' && clientIp !== serverIp) {
    linkMode = LINK_MODE.WIFI;
  }
  return { clientIp: clientIp, sn: sn, linkMode: linkMode };
}

exports.getProjectName = getProjectName;
exports.recordClient = recordClient;
exports.getServerAddress = getServerAddress;
exports.getClientFromRequest = getClientFromRequest;
exports.getRecordClient = getRecordClient;
exports.LINK_MODE = LINK_MODE;