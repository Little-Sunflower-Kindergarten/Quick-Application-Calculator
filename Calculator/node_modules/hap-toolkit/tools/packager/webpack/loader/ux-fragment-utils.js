'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processScriptFrag = exports.processStyleFrag = exports.processTemplateFrag = exports.processImportFrag = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _validator = require('../../compiler/template/validator');

var _validator2 = _interopRequireDefault(_validator);

var _utils = require('../../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loaderPath = __dirname; /*
                             * Copyright (C) 2017, hapjs.org. All rights reserved.
                             */

var defaultLoaders = {
  // common
  component: _path2.default.resolve(loaderPath, 'ux-loader.js'),
  fragment: _path2.default.resolve(loaderPath, 'fragment-loader.js'),
  template: _path2.default.resolve(loaderPath, 'template-loader.js'),
  style: _path2.default.resolve(loaderPath, 'style-loader.js'),
  script: _path2.default.resolve(loaderPath, 'script-loader.js'),
  babel: (0, _utils.loadBabelModule)('babel-loader'),
  // app
  mainfest: _path2.default.resolve(loaderPath, 'manifest-loader.js'),
  // page
  access: _path2.default.resolve(loaderPath, 'access-loader.js'),
  json: _path2.default.resolve(loaderPath, 'json-loader.js')

  // 是否存在全局配置，默认无配置：undefined
};var optionBabelrc = process && process.babelrc;

/**
 * 生成loader请求代码
 * @param type
 * @param config
 * @param uxType
 * @returns {*}
 */
function makeLoaderString(type, config, uxType) {
  config = config || {};
  var loaders = void 0;

  if (type === _utils.FRAG_TYPE.IMPORT) {
    loaders = [{
      name: defaultLoaders.component,
      query: {
        type: _utils.FRAG_TYPE.IMPORT
      }
    }];
    return (0, _utils.stringifyLoaders)(loaders);
  }

  if (type === _utils.FRAG_TYPE.TEMPLATE) {
    loaders = [{
      name: defaultLoaders.json
    }, {
      name: defaultLoaders.template
    }];
    if (!config.alone) {
      // 如果<template>不是单独文件，则需要提取
      loaders.push({
        name: defaultLoaders.fragment,
        query: {
          index: 0,
          type: _utils.FRAG_TYPE.TEMPLATE
        }
      });
    }
    return (0, _utils.stringifyLoaders)(loaders);
  }

  if (type === _utils.FRAG_TYPE.STYLE) {
    loaders = [{
      name: defaultLoaders.json
    }, {
      name: defaultLoaders.style,
      query: {
        index: 0,
        type: _utils.FRAG_TYPE.STYLE
      }
    }];

    if (config.lang) {
      loaders.push({
        name: config.lang + '-loader'
      });
    }

    if (!config.alone) {
      // 如果<style>不是单独文件，则需要提取
      loaders.push({
        name: defaultLoaders.fragment,
        query: {
          index: 0,
          type: _utils.FRAG_TYPE.STYLE
        }
      });
    }
    return (0, _utils.stringifyLoaders)(loaders);
  }

  if (type === _utils.FRAG_TYPE.SCRIPT) {
    loaders = [{
      name: defaultLoaders.script
    }];
    if (uxType === _utils.UX_TYPE.APP) {
      loaders.push({
        name: defaultLoaders.mainfest,
        query: {
          path: config.path
        }
      }, {
        name: defaultLoaders.babel,
        query: {
          presets: [(0, _utils.loadBabelModule)('babel-preset-env')],
          plugins: [(0, _utils.loadBabelModule)('babel-plugin-transform-runtime')],
          comments: 'false',
          babelrc: optionBabelrc
        }
      });
    } else {
      loaders.push({
        name: defaultLoaders.babel,
        query: {
          presets: [(0, _utils.loadBabelModule)('babel-preset-env')],
          plugins: [_path2.default.resolve(loaderPath, 'jsx-loader.js')],
          comments: 'false',
          babelrc: optionBabelrc
        }
      });
      if ((0, _utils.isUXRender)(uxType)) {
        loaders.push({
          name: defaultLoaders.access
        });
      }
    }

    if (!config.alone) {
      // 如果<script>不是单独文件，则需要提取
      loaders.push({
        name: defaultLoaders.fragment,
        query: {
          index: 0,
          type: _utils.FRAG_TYPE.SCRIPT
        }
      });
    }
    return (0, _utils.stringifyLoaders)(loaders);
  }
}

/**
 * 处理import片段
 * @param $loader
 * @param imports - 外部导入的组件列表
 * @param importNames - 外部导入的组件名列表
 * @returns {string}
 */
function processImportFrag($loader, imports, importNames) {
  var retStr = '';
  if (imports.length) {
    for (var i = 0; i < imports.length; i++) {
      var imp = imports[i];
      var fragAttrsSrc = imp.attrs.src;
      var fragAttrsName = imp.attrs.name;
      if (!fragAttrsSrc) {
        (0, _utils.logWarn)($loader, [{ reason: '导入组件需要设置属性 `src` ' }]);
        return '';
      }

      if (!imp.isValid) {
        $loader.emitError('\u5BFC\u5165\u7EC4\u4EF6resolve \u51FA\u9519 ' + imp.err);
        return '';
      }

      // 合法并赋值最终路径
      fragAttrsSrc = imp.srcPath;

      // 如果没有指定name，则从src中提取
      if (!fragAttrsName) {
        fragAttrsName = (0, _utils.getNameByPath)(fragAttrsSrc);
      }
      // 全部转化为小写
      fragAttrsName = fragAttrsName.toLowerCase();
      if (_validator2.default.isReservedTag(fragAttrsName)) {
        (0, _utils.logWarn)($loader, [{ reason: '导入组件的属性 `name` 不能使用保留字: ' + fragAttrsName }]);
      }

      importNames.push(fragAttrsName);

      (0, _utils.print)({
        name: fragAttrsName,
        src: fragAttrsSrc
      });
      var reqStr = (0, _utils.makeRequireString)($loader, makeLoaderString(_utils.FRAG_TYPE.IMPORT), fragAttrsSrc + '?uxType=' + _utils.UX_TYPE.COMP + '&name=' + fragAttrsName);
      retStr += reqStr;
    }
  }
  return retStr;
}

/**
 * 处理模板片段
 * @param $loader
 * @param templates
 * @param uxType
 */
function processTemplateFrag($loader, templates, uxType) {
  var retStr = '';
  if (!templates.length) {
    (0, _utils.logWarn)($loader, [{ reason: '需要模板片段' }]);
  } else {
    // 有且仅有一个模板片段
    var template = templates[0];
    // 文件绝对路径
    var src = $loader.resourcePath;
    var fragAttrsSrc = template.attrs.src;
    // 如果是外部导入
    if (fragAttrsSrc) {
      src = fragAttrsSrc;
    }
    retStr = 'var $app_template$ = ' + (0, _utils.makeRequireString)($loader, makeLoaderString(_utils.FRAG_TYPE.TEMPLATE, {
      alone: !!fragAttrsSrc
    }), src + '?uxType=' + uxType);
  }
  return retStr;
}

/**
 * 处理style片段
 * @param $loader
 * @param styles
 * @param uxType
 */
function processStyleFrag($loader, styles, uxType) {
  var retStr = '';
  if (styles.length) {
    // 有且仅有一个<style>片段
    var style = styles[0];
    // 文件绝对路径
    var src = $loader.resourcePath;
    var fragAttrsSrc = style.attrs.src;
    var fragAttrsLang = style.attrs.lang;
    if (fragAttrsSrc) {
      src = fragAttrsSrc;
    }

    (0, _utils.print)({
      style: src
    });

    retStr = 'var $app_style$ = ' + (0, _utils.makeRequireString)($loader, makeLoaderString(_utils.FRAG_TYPE.STYLE, {
      alone: !!fragAttrsSrc,
      lang: fragAttrsLang
    }), src + '?uxType=' + uxType);
  }
  return retStr;
}

/**
 * 处理script片段
 * @param $loader
 * @param scripts
 * @param uxType
 * @returns {string}
 */
function processScriptFrag($loader, scripts, uxType) {
  var retStr = '';
  if (scripts.length) {
    // 有且仅有一个<script>节点
    var script = scripts[0];
    // 文件绝对路径
    var src = $loader.resourcePath;
    var fragAttrsSrc = script.attrs.src;
    if (fragAttrsSrc) {
      src = fragAttrsSrc;
    }

    retStr = 'var $app_script$ = ' + (0, _utils.makeRequireString)($loader, makeLoaderString(_utils.FRAG_TYPE.SCRIPT, {
      alone: !!fragAttrsSrc,
      path: $loader.resourcePath
    }, uxType), src + '?uxType=' + uxType);
  }
  return retStr;
}

exports.processImportFrag = processImportFrag;
exports.processTemplateFrag = processTemplateFrag;
exports.processStyleFrag = processStyleFrag;
exports.processScriptFrag = processScriptFrag;