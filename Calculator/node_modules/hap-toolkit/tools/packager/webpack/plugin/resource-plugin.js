'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _aaptjs = require('aaptjs');

var _aaptjs2 = _interopRequireDefault(_aaptjs);

var _info = require('../../common/info');

var info = _interopRequireWildcard(_info);

var _shared = require('../../common/shared');

var _utils = require('../../common/utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 支持文件扩展名
var FILE_EXT_LIST = info.name.extList;
// 排除资源文件扩展名
/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

var FILE_EXT_NORES = FILE_EXT_LIST.concat(['.js', '.jsx', '.coffee', '.ts', '.tsx', '.vue', '.css', '.less', '.sass', '.styl', '.html', '.json', '.md']);

function ResourcePlugin(options) {
  this.options = options;
}

ResourcePlugin.prototype.apply = function (compiler) {
  var options = this.options;
  var webpackOptions = compiler.options;
  // 监听时处理
  compiler.plugin('watch-run', function (watching, callback) {
    Object.keys(webpackOptions.entry).forEach(function (key) {
      var val = webpackOptions.entry[key];
      if (val instanceof Array && !/app\.js/.test(key)) {
        // 删除webpack-dev-server注入的watch依赖
        val[0].indexOf('webpack-dev-server') !== -1 && val.shift();
      }
    });
    callback();
  });

  compiler.plugin('emit', function (compilation, callback) {
    var pathSrc = options.pathSrc;
    var pathBuild = options.pathBuild;

    var innerInputFS = this.inputFileSystem;
    var innerOutputFS = this.outputFileSystem;

    // 搜集资源文件
    var res = (0, _utils.collectResFile)(innerInputFS, pathSrc, pathBuild, FILE_EXT_NORES);
    var resnum = Object.keys(res).length;

    // 拷贝资源文件
    Object.keys(res).forEach(function (resDestFile) {
      var resSrcFile = res[resDestFile];
      // 确保目标目录存在
      innerOutputFS.mkdirp(_path2.default.dirname(resDestFile), function () {
        var resSrcFileStat = innerInputFS.statSync(resSrcFile);
        // 处理每个文件
        if (resSrcFileStat && resSrcFileStat.isFile()) {
          var resSrcFileBase = _path2.default.basename(resSrcFile);

          if (/.+\.9\.png$/.test(resSrcFileBase)) {
            // 处理.9图片
            _aaptjs2.default.singleCrunch(resSrcFile, resDestFile, function (err) {
              if (err) {
                _utils.colorconsole.log('### App Loader ### \u8F6C\u6362\u8D44\u6E90\u6587\u4EF6(' + resSrcFile + ')\u5931\u8D25\uFF1A' + err.message);
              }
              nextCallback(resSrcFile, resDestFile);
            });
          } else {
            // 复制文件
            innerInputFS.readFile(resSrcFile, function (err, data) {
              if (err) {
                _utils.colorconsole.log('### App Loader ### \u590D\u5236\u8D44\u6E90\u6587\u4EF6(' + resSrcFile + ')\u5931\u8D25\uFF1A' + err.message);
              }
              innerOutputFS.writeFile(resDestFile, data, function (err) {
                if (err) {
                  _utils.colorconsole.log('### App Loader ### \u590D\u5236\u8D44\u6E90\u6587\u4EF6(' + resSrcFile + ')\u5931\u8D25\uFF1A' + err.message);
                }
                nextCallback(resSrcFile, resDestFile);
              });
            });
          }
        }
      });
    });

    function nextCallback() {
      if (--resnum > 0) {
        return;
      }

      _utils.colorconsole.log('### App Loader ### build目录构建完成');
      callback();
    }
  });

  // 更新build/manifest.json
  compiler.plugin('emit', function (compilation, callback) {
    var pathSrc = options.pathSrc;
    var pathBuild = options.pathBuild;

    var innerInputFS = this.inputFileSystem;
    var innerOutputFS = this.outputFileSystem;

    var fileName = 'manifest.json';
    var pathManifestFrom = _path2.default.join(pathSrc, fileName);
    var pathManifestDest = _path2.default.join(pathBuild, fileName);

    // 输出无API判断文件是否存在，因此使用输入API来判断
    var fileExists = innerInputFS.readdirSync(pathSrc).indexOf(fileName) !== -1;
    if (fileExists) {
      var manifestCont = innerInputFS.readFileSync(pathManifestFrom, 'utf8');
      var manifestContPost = (0, _shared.updateManifestCont)(manifestCont, options).manifestCont;
      innerOutputFS.writeFile(pathManifestDest, manifestContPost, 'utf8', function (err) {
        if (err) {
          _utils.colorconsole.error('### App Loader ### \u66F4\u65B0\u8D44\u6E90\u6587\u4EF6(' + pathManifestDest + ')\u5931\u8D25\uFF1A' + err.message);
        }
        callback();
      });
    } else {
      _utils.colorconsole.error('### App Loader ### ' + pathSrc + '\u76EE\u5F55\u4E0B\u65E0\u8D44\u6E90\u6587\u4EF6manifest.json');
      callback();
    }
  });
};

module.exports = ResourcePlugin;