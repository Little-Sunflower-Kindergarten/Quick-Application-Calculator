'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorconsole = undefined;
exports.mkdirsSync = mkdirsSync;
exports.getIPv4IPAddress = getIPv4IPAddress;
exports.getClientIPAddress = getClientIPAddress;
exports.stripPrefixForIPV4MappedIPV6Address = stripPrefixForIPV4MappedIPV6Address;
exports.outputQRCodeOnTerminal = outputQRCodeOnTerminal;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _qrcodeTerminal = require('qrcode-terminal');

var _qrcodeTerminal2 = _interopRequireDefault(_qrcodeTerminal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright (C) 2017, hapjs.org. All rights reserved.
                                                                                                                                                                                                     */

/**
 * 创建任意深度的路径的文件夹
 * @param dirname
 * @returns {boolean}
 */
function mkdirsSync(dirname) {
  if (_fs2.default.existsSync(dirname)) {
    return true;
  } else {
    if (mkdirsSync(_path2.default.dirname(dirname))) {
      _fs2.default.mkdirSync(dirname);
      return true;
    }
  }
}

var logLevelMap = {};

function prependLevel(levelName, args) {
  !logLevelMap[levelName] && function (levelNameInner) {
    var logLevel = levelNameInner.toUpperCase().substr(0, 4);
    logLevel.paddEnd && logLevel.paddEnd(4);
    logLevelMap[levelName] = logLevel;
  }(levelName);

  if (typeof args[0] === 'string' && args[0].length > 1 && args[0][0] !== '[') {
    args[0] = '[' + logLevelMap[levelName] + '] ' + args[0];
  }
}

/**
 * 带颜色的info, log, warn, error, trace的输出工具函数
 */
var colorconsole = exports.colorconsole = {
  trace: function trace() {
    var _console;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    prependLevel('trace', args);
    (_console = console).trace.apply(_console, _toConsumableArray(args));
  },
  log: function log() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    prependLevel('log', args);
    console.log(_chalk2.default.green.apply(_chalk2.default, _toConsumableArray(args)));
  },
  info: function info() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    prependLevel('info', args);
    console.info(_chalk2.default.green.apply(_chalk2.default, _toConsumableArray(args)));
  },
  warn: function warn() {
    var _chalk$yellow;

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    prependLevel('warn', args);
    console.warn((_chalk$yellow = _chalk2.default.yellow).bold.apply(_chalk$yellow, _toConsumableArray(args)));
  },
  error: function error() {
    var _chalk$red;

    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    prependLevel('error', args);
    console.error((_chalk$red = _chalk2.default.red).bold.apply(_chalk$red, _toConsumableArray(args)));
  },
  throw: function _throw() {
    var _chalk$red2;

    throw new Error((_chalk$red2 = _chalk2.default.red).bold.apply(_chalk$red2, arguments));
  }
};

/**
 * 获取服务器端的IP
 */
function getIPv4IPAddress() {
  var ifaces = _os2.default.networkInterfaces();
  var result = void 0;

  for (var prop in ifaces) {
    if (Object.prototype.hasOwnProperty.call(ifaces, prop)) {
      var iface = ifaces[prop];

      iface.every(function (eachAlias, j, all) {
        if (eachAlias.family === 'IPv4' && !eachAlias.internal && eachAlias.address !== '127.0.0.1') {
          result = eachAlias;
          return false;
        }
        return true;
      });

      if (result !== void 0) {
        break;
      }
    }
  }

  return result && result.address;
}

/**
 * 获取客户端ip
 * @param req node Http IncomingRequest Object
 * @returns {any|*|string}
 */
function getClientIPAddress(req) {
  var ip = req.headers['x-forwarded-for'] || req.connection && req.connection.remoteAddress || req.socket && req.socket.remoteAddress || req.connection && req.connection.socket && req.connection.socket.remoteAddress;

  return stripPrefixForIPV4MappedIPV6Address(ip);
}

/**
 * 检测可能是IpV4-mapped IpV6 格式的ip
 * - https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
 *
 * @param ip  IpV4-mapped IpV6 string
 * @returns {*}
 */
function stripPrefixForIPV4MappedIPV6Address(ip) {
  if (/^::1$/.test(ip)) {
    ip = '127.0.0.1';
  }
  if (/^::.{0,4}:(\d{1,3}\.){3}\d{1,3}/.test(ip)) {
    ip = ip.replace(/^.*:/, '');
  }
  return ip;
}

/**
 * 命令行输出二维码
 * @param text
 */
function outputQRCodeOnTerminal(text) {
  console.info('');
  console.info('\u751F\u6210HTTP\u670D\u52A1\u5668\u7684\u4E8C\u7EF4\u7801: ' + text);
  _qrcodeTerminal2.default.generate(text, { small: true });
}