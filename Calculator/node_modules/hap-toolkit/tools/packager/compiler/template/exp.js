'use strict';

var _expression = require('./lib/expression');

var _expression2 = _interopRequireDefault(_expression);

var _text = require('./lib/text');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 去除字符串头部空格或指定字符
/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

function trimhtml(str) {
  // 2个空格以上, 仅保留一个空格
  str = str.replace(/^\s\s+/, ' ');

  if (str.length <= 1) {
    return str;
  }

  var startSpace = str.charAt(0) === ' ' ? 1 : 0;
  var oldLength = str.length;
  str = str.trim();

  // 尾部多余1个空格
  if (oldLength - str.length - startSpace >= 1) {
    str = str + ' ';
  }

  return (startSpace ? ' ' : '') + str;
}

/**
 * 表达式转换
 * @param expContent
 * @param toFunc
 * @returns {*}
 */
function transExpr(expContent, toFunc) {
  var ret = void 0;
  var trimExpContent = expContent.trim();
  if (!_text2.default.isExpr(trimExpContent)) {
    ret = trimhtml(expContent);
  } else {
    ret = [];
    var tokens = _text2.default.parseText(trimExpContent);
    var isSingle = tokens.length === 1;
    tokens.forEach(function (token) {
      if (token.tag) {
        var res = _expression2.default.parseExpression(token.value);
        if (!isSingle) {
          res = '(' + res + ')';
        }
        ret.push(res);
      } else {
        ret.push('\'' + token.value + '\'');
      }
    });
    ret = ret.join(' + ');
    if (toFunc !== false) {
      /* eslint-disable no-eval */
      ret = eval('(function () {return ' + ret + '})');
      /* eslint-enable no-eval */
    }
  }
  return ret;
}

transExpr.isExpr = _text2.default.isExpr;
transExpr.singleExpr = _text2.default.singleExpr;
transExpr.removeExprffix = _text2.default.removeExprffix;
transExpr.addExprffix = _text2.default.addExprffix;

module.exports = transExpr;