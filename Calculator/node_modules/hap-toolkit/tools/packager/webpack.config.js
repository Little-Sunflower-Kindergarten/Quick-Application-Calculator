'use strict';

/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

var path = require('path');
var info = require('./common/info');

var _require = require('./common/config'),
    initOptions = _require.initOptions;

var HandlerPlugin = require('./webpack/plugin/handler-plugin');
var ResourcePlugin = require('./webpack/plugin/resource-plugin');
var ZipPlugin = require('./webpack/plugin/zip-plugin');
var NotifyPlugin = require('./webpack/plugin/notify-plugin');

var moduleName = info.moduleName;
var FILE_EXT_LIST = info.name.extList;

/**
 * 配置关联
 * @param webpackConf
 * @param defaults
 * @param options
 */
function postHook(webpackConf, defaults, options) {
  // 环境信息
  var nodeConf = defaults.nodeConf,
      appPackageName = defaults.appPackageName,
      versionCode = defaults.versionCode,
      pathDist = defaults.pathDist,
      pathBuild = defaults.pathBuild,
      pathSrc = defaults.pathSrc;


  initOptions(options.env);

  webpackConf.module.rules.push({
    test: new RegExp('(' + FILE_EXT_LIST.map(function (k) {
      return '\\' + k;
    }).join('|') + ')(\\?[^?]+)?$'),
    use: [path.resolve(__dirname, 'webpack/loader', 'ux-loader.js')],
    // Disable Babel compact option
    exclude: /node_modules/
  }, {
    test: /\.js$/,
    use: [path.resolve(__dirname, 'webpack/loader', 'module-loader.js'), 'babel-loader'],
    exclude: function exclude(path) {
      return (/node_modules/.test(path) && !new RegExp(moduleName).test(path)
      );
    }
  });

  // 是否使用release签名
  var dvWithSign = nodeConf.NODE_PHASE === 'dv' && options.sign;
  var olWithoutDebug = nodeConf.NODE_PHASE !== 'dv' && !options.debug;
  var useReleaseSign = dvWithSign || olWithoutDebug;
  var useSignName = !useReleaseSign ? 'debug' : 'release';

  webpackConf.plugins.push(
  // 框架Handler包装
  new HandlerPlugin(), new ResourcePlugin({
    pathSrc: pathSrc,
    pathBuild: pathBuild,
    sign: useSignName
  }),
  // 打包
  new ZipPlugin({
    name: appPackageName,
    versionCode: versionCode,
    output: pathDist,
    pathBuild: pathBuild,
    sign: useSignName
  }), new NotifyPlugin());
}

module.exports = {
  postHook: postHook
};