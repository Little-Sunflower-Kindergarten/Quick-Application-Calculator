'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateManifestCont = exports.updateSourceScript = undefined;

var _utils = require('./utils');

/**
 * 初始化框架信息
 */
function frameworkInit() {
  // 框架全局信息
  // noinspection JSAnnotator
  global.framework = {
    module: {
      // 基本名
      base: 'system',
      // 扩展名
      ext: 'service'
    },
    // 保留的features，保持与runtime_config.xml同步
    reservedFeatures: [],
    // 不加入manifest中的feature
    reservedFeatureExclude: [],
    // 项目信息
    project: {
      manifestFilePath: null,
      // 记录feature列表，更新到manifest.json
      featureList: [],
      module: {
        usedBaseAll: false,
        usedExtAll: false
      }
    }
    // 添加native模块
  };global.framework.reservedFeatures = global.framework.reservedFeatures.concat([
  // system
  global.framework.module.base + '.contact', global.framework.module.base + '.webview', global.framework.module.base + '.notification', global.framework.module.base + '.media', global.framework.module.base + '.file', global.framework.module.base + '.storage', global.framework.module.base + '.vibrator', global.framework.module.base + '.calendar', global.framework.module.base + '.shortcut', global.framework.module.base + '.network', global.framework.module.base + '.fetch', global.framework.module.base + '.geolocation', global.framework.module.base + '.request', global.framework.module.base + '.share', global.framework.module.base + '.clipboard', global.framework.module.base + '.prompt', global.framework.module.base + '.device', global.framework.module.base + '.barcode', global.framework.module.base + '.bluetooth', global.framework.module.base + '.sensor', global.framework.module.base + '.audio', global.framework.module.base + '.package', global.framework.module.base + '.volume', global.framework.module.base + '.record', global.framework.module.base + '.brightness', global.framework.module.base + '.battery', global.framework.module.base + '.image', global.framework.module.base + '.cipher', global.framework.module.base + '.sms', global.framework.module.base + '.wifi', global.framework.module.base + '.websocketfactory',

  // service
  global.framework.module.ext + '.alipay', global.framework.module.ext + '.push', global.framework.module.ext + '.pay', global.framework.module.ext + '.share', global.framework.module.ext + '.wxpay', global.framework.module.ext + '.stats', global.framework.module.ext + '.account', global.framework.module.ext + '.wxaccount', global.framework.module.ext + '.qqaccount', global.framework.module.ext + '.wbaccount']);
  global.framework.reservedFeatureExclude.push(global.framework.module.base + '.app');
  global.framework.reservedFeatureExclude.push(global.framework.module.base + '.model');
  global.framework.reservedFeatureExclude.push(global.framework.module.base + '.router');
}

/**
 * 对Script文件进行更新
 */
/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

function updateSourceScript(fileCont) {
  // 要提醒的变更日志
  var logFeatureList = [];

  // 记录引用的内部模块
  var modInternalNamePatternFull = new RegExp('[\'"]@(' + global.framework.module.base + '|' + global.framework.module.ext + ').*?[\'"]', 'g');
  var modInternalNamePatterHalf = new RegExp('[\'"]@((' + global.framework.module.base + '|' + global.framework.module.ext + ').*?)[\'"]');
  // 引入的native模块列表
  var modInternalNameList = fileCont.match(modInternalNamePatternFull) || [];
  modInternalNameList.forEach(function (modName) {
    var match = (modName.match(modInternalNamePatterHalf) || [])[1];
    if (match === '@' + global.framework.module.base) {
      global.framework.project.module.usedBaseAll = true;
    } else if (match === '@' + global.framework.module.ext) {
      global.framework.project.module.usedExtAll = true;
    } else if (global.framework.reservedFeatures.indexOf(match) !== -1) {
      // 确定存在，然后才加入
      global.framework.project.featureList.indexOf(match) === -1 && global.framework.project.featureList.push(match);
    } else if (global.framework.reservedFeatureExclude.indexOf(match) !== -1) {
      // 不包括的feature，不做警告
    } else {
      // 不识别，错误的书写
      logFeatureList.push({
        reason: 'WARN: \u60A8\u5F15\u5165\u4E86\u672A\u8BC6\u522B\u7684native\u6A21\u5757\uFF1A' + match
      });
    }
  });

  return {
    fileCont: fileCont,
    logFeatureList: logFeatureList
  };
}

/**
 * 更新manifest内容
 */
function updateManifestCont(manifestCont, options) {
  var manifestJson = null;

  // 解析JSON文件
  try {
    manifestJson = JSON.parse(manifestCont);
  } catch (err) {
    _utils.colorconsole.error('ERROR: \u89E3\u6790manifest.json\u6587\u4EF6\u51FA\u9519\uFF1A' + err.message);
    throw err;
  }
  if (!manifestJson) {
    return;
  }

  // 更新config.debug
  manifestJson.config = manifestJson.config || {};
  manifestJson.config.debug = !options.sign;

  // 设置默认
  if (!manifestJson.minPlatformVersion) {
    manifestJson.minPlatformVersion = 101;
  }

  // 更新features
  manifestJson.features = manifestJson.features || [];

  // 在项目所有引用的模块列表中删除manifest已声明的模块
  var projectFeatureList = [].concat(global.framework.project.featureList);
  manifestJson.features.forEach(function (feaItem) {
    var feaIndex = projectFeatureList.indexOf(feaItem.name);
    feaIndex !== -1 && projectFeatureList.splice(feaIndex, 1);
  });
  // 在保留模块列表中存在的模块则应该加入
  var shouldIncludeProjectFeatureList = [];
  projectFeatureList.forEach(function (feaName) {
    global.framework.reservedFeatures.indexOf(feaName) !== -1 && shouldIncludeProjectFeatureList.push(feaName);
  });
  if (shouldIncludeProjectFeatureList.length > 0) {
    var mapList = shouldIncludeProjectFeatureList.map(function (feaName) {
      return { name: feaName };
    });
    manifestJson.features = manifestJson.features.concat(mapList);
    _utils.colorconsole.warn('manifest.json\u6587\u4EF6\u4E2D\u6DFB\u52A0\u672A\u58F0\u660E\u7684features: ' + shouldIncludeProjectFeatureList.join(', ') + '\n');
  }

  // 更新内容
  manifestCont = JSON.stringify(manifestJson, null, 2);

  return {
    manifestCont: manifestCont
  };
}

// 注册全局的framework
frameworkInit();

exports.updateSourceScript = updateSourceScript;
exports.updateManifestCont = updateManifestCont;