/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _validator = require('../../compiler/template/validator');

var _validator2 = _interopRequireDefault(_validator);

var _uxFragmentUtils = require('./ux-fragment-utils');

var _compiler = require('../../compiler');

var _utils = require('../../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loaderPath = __dirname;
var packagepath = _path2.default.resolve(loaderPath, '../../package.json');

/**
 * 解析ux文件中的所有代码片段，并组装处理
 * @param loader
 * @param source
 */
function loader(loader, source) {
  var $loader = loader;
  $loader.cacheable && $loader.cacheable();

  var resourceQuery = _loaderUtils2.default.parseQuery($loader.resourceQuery); // 在文件url中传入的参数'path?xxx'
  var resourcePath = $loader.resourcePath; // 文件绝对路径
  var filename = _path2.default.relative('.', resourcePath); // 文件相对路径
  // 文件类型
  var uxType = resourceQuery.uxType;

  // 如果是入口文件，则使用文件名的md5作为标识, 否则使用原有文件名（不包含扩展名）
  var name = false ? (0, _md2.default)(filename) : resourceQuery.name || (0, _utils.getNameByPath)(resourcePath);

  if (_validator2.default.isReservedTag(name)) {
    (0, _utils.logWarn)($loader, [{ reason: '脚本文件名不能使用保留字:' + name }]);
  }

  (0, _utils.print)({
    resourceQuery: $loader.resourceQuery,
    resourcePath: $loader.resourcePath,
    name: name
  });

  // 解析模板，提取各个类型的节点和依赖组件列表
  var frags = (0, _compiler.parseFragmentsWithCache)(source, resourcePath);
  (0, _utils.print)(frags);

  return parseImportList($loader, frags.import).then(function () {
    return assemble($loader, frags, name, uxType, resourcePath);
  });
}

/**
 * 统一解析全部后处理
 * @param $loader
 * @param importList
 * @return {Promise}
 */
function parseImportList($loader, importList) {
  return Promise.all(importList.map(function (importItem) {
    return resolveImportItemSrc($loader, importItem);
  }));
}

/**
 * 利用webpack自身能力解析路径；支持resolve.alias
 * @param $loader
 * @param importItem
 * @return {*}
 */
function resolveImportItemSrc($loader, importItem) {
  if (!importItem.attrs.src) {
    importItem.isValid = false;
    return Promise.resolve(importItem);
  } else {
    return new Promise(function (resolve) {
      $loader.resolve($loader.context, importItem.attrs.src, function (err, result) {
        if (err) {
          importItem.isValid = false;
          importItem.err = err;
          return resolve(importItem);
        } else {
          importItem.isValid = true;
          importItem.srcPath = result;
          return resolve(importItem);
        }
      });
    });
  }
}

/**
 * 收集结果
 * @param $loader
 * @param frags
 * @param name
 * @param uxType
 * @param resourcePath
 * @return {String}
 */
function assemble($loader, frags, name, uxType, resourcePath) {
  var output = '';
  if (uxType === _utils.UX_TYPE.APP) {
    // 处理脚本
    output += (0, _uxFragmentUtils.processScriptFrag)($loader, frags.script, uxType);

    output += '\n$app_define$(\'@app-application/' + name + '\', [], function($app_require$, $app_exports$, $app_module$){\n';
    if (frags.script.length > 0) {
      output += '     $app_script$($app_module$, $app_exports$, $app_require$)\n';
      output += '     if ($app_exports$.__esModule && $app_exports$.default) {\n            $app_module$.exports = $app_exports$.default\n        }\n';
    }
    output += '})\n';

    var pkg = JSON.parse(_fs2.default.readFileSync(packagepath).toString());
    output += '\n$app_bootstrap$(\'@app-application/' + name + '\',{ packagerVersion: \'' + pkg.subversion.packager + '\'})\n';
  } else {
    // 外部导入的组件列表
    var importNames = [];

    // 处理导入的组件
    output += (0, _uxFragmentUtils.processImportFrag)($loader, frags.import, importNames);
    // 处理模板
    output += (0, _uxFragmentUtils.processTemplateFrag)($loader, frags.template, uxType);
    // 处理样式
    output += (0, _uxFragmentUtils.processStyleFrag)($loader, frags.style, uxType);
    // 处理脚本
    output += (0, _uxFragmentUtils.processScriptFrag)($loader, frags.script, uxType);

    output += '\n$app_define$(\'@app-component/' + name + '\', [], function($app_require$, $app_exports$, $app_module$){\n';
    if (frags.script.length > 0) {
      output += '     $app_script$($app_module$, $app_exports$, $app_require$)\n';
      output += '     if ($app_exports$.__esModule && $app_exports$.default) {\n            $app_module$.exports = $app_exports$.default\n        }\n';
    }
    output += '     $app_module$.exports.template = $app_template$\n';
    if (frags.style.length > 0) {
      output += '     $app_module$.exports.style = $app_style$\n';
    }
    output += '})\n';

    if ((0, _utils.isUXRender)(uxType)) {
      // 页面入口文件
      var _pkg = JSON.parse(_fs2.default.readFileSync(packagepath).toString());
      output += '\n$app_bootstrap$(\'@app-component/' + name + '\',{ packagerVersion: \'' + _pkg.subversion.packager + '\'})\n';
    }
  }
  return output;
}

module.exports = loader;