/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

'use strict';

var _utils = require('../../common/utils');

var colorNames = {
  aliceblue: '#F0F8FF',
  antiquewhite: '#FAEBD7',
  aqua: '#00FFFF',
  aquamarine: '#7FFFD4',
  azure: '#F0FFFF',
  beige: '#F5F5DC',
  bisque: '#FFE4C4',
  black: '#000000',
  blanchedalmond: '#FFEBCD',
  blue: '#0000FF',
  blueviolet: '#8A2BE2',
  brown: '#A52A2A',
  burlywood: '#DEB887',
  cadetblue: '#5F9EA0',
  chartreuse: '#7FFF00',
  chocolate: '#D2691E',
  coral: '#FF7F50',
  cornflowerblue: '#6495ED',
  cornsilk: '#FFF8DC',
  crimson: '#DC143C',
  cyan: '#00FFFF',
  darkblue: '#00008B',
  darkcyan: '#008B8B',
  darkgoldenrod: '#B8860B',
  darkgray: '#A9A9A9',
  darkgreen: '#006400',
  darkgrey: '#A9A9A9',
  darkkhaki: '#BDB76B',
  darkmagenta: '#8B008B',
  darkolivegreen: '#556B2F',
  darkorange: '#FF8C00',
  darkorchid: '#9932CC',
  darkred: '#8B0000',
  darksalmon: '#E9967A',
  darkseagreen: '#8FBC8F',
  darkslateblue: '#483D8B',
  darkslategray: '#2F4F4F',
  darkslategrey: '#2F4F4F',
  darkturquoise: '#00CED1',
  darkviolet: '#9400D3',
  deeppink: '#FF1493',
  deepskyblue: '#00BFFF',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1E90FF',
  firebrick: '#B22222',
  floralwhite: '#FFFAF0',
  forestgreen: '#228B22',
  fuchsia: '#FF00FF',
  gainsboro: '#DCDCDC',
  ghostwhite: '#F8F8FF',
  gold: '#FFD700',
  goldenrod: '#DAA520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#ADFF2F',
  grey: '#808080',
  honeydew: '#F0FFF0',
  hotpink: '#FF69B4',
  indianred: '#CD5C5C',
  indigo: '#4B0082',
  ivory: '#FFFFF0',
  khaki: '#F0E68C',
  lavender: '#E6E6FA',
  lavenderblush: '#FFF0F5',
  lawngreen: '#7CFC00',
  lemonchiffon: '#FFFACD',
  lightblue: '#ADD8E6',
  lightcoral: '#F08080',
  lightcyan: '#E0FFFF',
  lightgoldenrodyellow: '#FAFAD2',
  lightgray: '#D3D3D3',
  lightgreen: '#90EE90',
  lightgrey: '#D3D3D3',
  lightpink: '#FFB6C1',
  lightsalmon: '#FFA07A',
  lightseagreen: '#20B2AA',
  lightskyblue: '#87CEFA',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#B0C4DE',
  lightyellow: '#FFFFE0',
  lime: '#00FF00',
  limegreen: '#32CD32',
  linen: '#FAF0E6',
  magenta: '#FF00FF',
  maroon: '#800000',
  mediumaquamarine: '#66CDAA',
  mediumblue: '#0000CD',
  mediumorchid: '#BA55D3',
  mediumpurple: '#9370DB',
  mediumseagreen: '#3CB371',
  mediumslateblue: '#7B68EE',
  mediumspringgreen: '#00FA9A',
  mediumturquoise: '#48D1CC',
  mediumvioletred: '#C71585',
  midnightblue: '#191970',
  mintcream: '#F5FFFA',
  mistyrose: '#FFE4E1',
  moccasin: '#FFE4B5',
  navajowhite: '#FFDEAD',
  navy: '#000080',
  oldlace: '#FDF5E6',
  olive: '#808000',
  olivedrab: '#6B8E23',
  orange: '#FFA500',
  orangered: '#FF4500',
  orchid: '#DA70D6',
  palegoldenrod: '#EEE8AA',
  palegreen: '#98FB98',
  paleturquoise: '#AFEEEE',
  palevioletred: '#DB7093',
  papayawhip: '#FFEFD5',
  peachpuff: '#FFDAB9',
  peru: '#CD853F',
  pink: '#FFC0CB',
  plum: '#DDA0DD',
  powderblue: '#B0E0E6',
  purple: '#800080',
  red: '#FF0000',
  rosybrown: '#BC8F8F',
  royalblue: '#4169E1',
  saddlebrown: '#8B4513',
  salmon: '#FA8072',
  sandybrown: '#F4A460',
  seagreen: '#2E8B57',
  seashell: '#FFF5EE',
  sienna: '#A0522D',
  silver: '#C0C0C0',
  skyblue: '#87CEEB',
  slateblue: '#6A5ACD',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#FFFAFA',
  springgreen: '#00FF7F',
  steelblue: '#4682B4',
  tan: '#D2B48C',
  teal: '#008080',
  thistle: '#D8BFD8',
  tomato: '#FF6347',
  turquoise: '#40E0D0',
  violet: '#EE82EE',
  wheat: '#F5DEB3',
  white: '#FFFFFF',
  whitesmoke: '#F5F5F5',
  yellow: '#FFFF00',
  yellowgreen: '#9ACD32'

  // 支持的位类选择器
};var cssPseudoClasses = ['disabled', 'checked', 'focus', 'active', 'visited', 'autoplay'];
// 'not','empty','first-child','last-child','read-only','read-write','link','visited',

// 伪元素
var cssPseudoElements = ['before', 'after', 'first-line', 'first-letter'];
// 长度单位
var cssLengthUnits = ['px', '%'];
// 角度单位
var cssAngleUnits = ['deg'];
// 时间单位
var cssTimeUnits = ['ms'];
// 日志类型
var logTypes = ['NOTE', 'WARNING', 'ERROR'];

var REGEXP_LENGTH = /^[-+]?[0-9]*\.?[0-9]+(.*)$/;
var REGEXP_COLOR_LONG = /^#[0-9a-fA-F]{6}$/;
var REGEXP_COLOR_SHORT = /^#[0-9a-fA-F]{3}$/;
var REGEXP_COLOR_RGB = /^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/;
var REGEXP_COLOR_RGBA = /^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*\.?\d+)\s*\)$/;
var REGEXP_ARRAYCOLORSTOP = /(rgba|rgb)\([0-9,.\spx%]+\)\s?[0-9-+px%]*|[#]?\w+\s?[0-9+-\spx%]*/gi;
var REGEXP_ARRAYCOLOR = /(?:.+?\s(?=[#a-zA-Z]))|.+/g;
var REGEXP_INT = /^[-+]?[0-9]+$/;
var REGEXP_URL = /^url\(\s*['"]?\s*([^()]+?)\s*['"]?\s*\)$/;
var REGEXP_NAME = /^[a-zA-Z_][a-zA-Z0-9]*$/;
var REGEXP_TIME = /^[-+]?[0-9]*\.?[0-9]+(.*)$/;

var REGEXP_TRANSFORM_ITEM = /^([0-9a-zA-Z]+)\((.*)\)$/;
var REGEXP_GRADIENT_DIRECTION = /^\s*(to|bottom|right|left|top)|[-+]?[0-9]*\.?[0-9]+(.*)/;
var REGEXP_ANGLE = /^[-+]?[0-9]*\.?[0-9]+(.*)/;
var REGEXP_NUMBER = /^[-+]?[0-9]*\.?[0-9]+$/;
var REGEXP_POSITION = /^(center|left|right|top|bottom)$/;

var validator = {
  /**
   * 长度值校验
   * @param v
   * @param units 支持的单位
   * @returns {*}
   * @constructor
   */
  length: function length(v, units) {
    v = (v || '').toString().trim();
    var match = v.match(REGEXP_LENGTH);
    if (!units) {
      units = cssLengthUnits;
    }

    if (match) {
      // 尝试检查单位
      var unit = match[1];
      if (+v === 0 && !unit) {
        return {
          value: +v + units[0]
        };
      } else if (!unit) {
        return {
          value: parseFloat(v) + units[0],
          reason: function reason(k, v, result) {
            return 'WARNING: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 没有指定单位，默认为 `' + units[0] + '`';
          }
        };
      } else if (units.indexOf(unit.toLowerCase()) >= 0) {
        // 如果单位合法
        return { value: v };
      } else {
        // 其余格式单位，一律默认为px
        return {
          value: parseFloat(v) + units[0],
          reason: function reason(k, v, result) {
            return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 不支持单位 `' + unit + '`, 目前仅支持 `' + JSON.stringify(units) + '`';
          }
        };
      }
    }
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 不正确(仅支持数值)';
      }
    };
  },
  /**
   * 颜色值校验, 支持 rgb, rgba, #fff, #ffffff, named-color
   * @param v
   * @returns {*}
   * @constructor
   */
  color: function color(v) {
    v = (v || '').toString().trim();

    if (v.match(REGEXP_COLOR_LONG)) {
      return { value: v };
    }

    if (v.match(REGEXP_COLOR_SHORT)) {
      // 如果是#XXX，则转换为#XXXXXX
      return {
        value: '#' + v[1] + v[1] + v[2] + v[2] + v[3] + v[3],
        reason: function reason(k, v, result) {
          return 'NOTE: 颜色值 `' + v + '` 转换为 `' + result + '`';
        }
      };
    }

    if (colorNames[v]) {
      // 如果颜色值为颜色名字符串
      return {
        value: colorNames[v],
        reason: function reason(k, v, result) {
          return 'NOTE: 颜色值 `' + v + '` 转换为 `' + result + '`';
        }
      };
    }

    // rgb/rgbag格式颜色处理
    var arrColor = void 0,
        r = void 0,
        g = void 0,
        b = void 0,
        a = void 0;

    if (REGEXP_COLOR_RGB.exec(v)) {
      arrColor = REGEXP_COLOR_RGB.exec(v);
      r = parseInt(arrColor[1]);
      g = parseInt(arrColor[2]);
      b = parseInt(arrColor[3]);
      if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
        return { value: 'rgb(' + [r, g, b].join(',') + ')' };
      }
    }

    if (REGEXP_COLOR_RGBA.exec(v)) {
      arrColor = REGEXP_COLOR_RGBA.exec(v);
      r = parseInt(arrColor[1]);
      g = parseInt(arrColor[2]);
      b = parseInt(arrColor[3]);
      a = parseFloat(arrColor[4]);
      if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
        return { value: 'rgba(' + [r, g, b, a].join(',') + ')' };
      }
    }

    // 透明色
    if (v === 'transparent') {
      return { value: 'rgba(0,0,0,0)' };
    }

    // 无效颜色值
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的颜色值 `' + v + '` 无效`';
      }
    };
  },
  /**
   * 整数/浮点数校验
   * @param {String} v
   * @returns {*}
   */
  number: function number(v) {
    v = (v || '').toString().trim();
    var match = v.match(REGEXP_NUMBER);

    if (match && !match[1]) {
      return { value: parseFloat(v) };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 无效 ` (仅支持数值)';
      }
    };
  },
  /**
   * 数组值(整数/浮点数)校验。 例如：scale
   * @param {Array} names
   * @param {String} v
   */
  arraynumber: function arraynumber(names, v) {
    v = (v || '').toString().trim();
    // 空格或逗号分隔
    var items = v.split(/[,\s]+/);

    if (items && items.length <= names.length) {
      // logType为当前日志类型在logTypes数组对应的下标
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;

      items.forEach(function (it, index) {
        result = validator.number(it);

        // 如果校验成功，则保存转换后的属性值
        if ((0, _utils.isValidValue)(result.value)) {
          values.push(result.value);
        }

        if (result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);

          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      return {
        value: logType < 2 ? (0, _utils.splitAttr)(names, values) : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },
  /**
   * 整数校验
   * @param {String} v
   * @returns {*}
   */
  integer: function integer(v) {
    v = (v || '').toString();

    if (v.match(REGEXP_INT)) {
      return { value: parseInt(v, 10) };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 无效 ` (仅支持整数)';
      }
    };
  },
  /**
   * animation-iteration-count校验
   * @param {String} v
   * @returns {*}
   */
  iterationcount: function iterationcount(v) {
    v = (v || '').toString().trim();

    if (v.match(REGEXP_INT)) {
      return { value: parseInt(v, 10) };
    }
    // 动画播放无限次
    else if (/^infinite$/.test(v)) {
        return { value: -1 };
      }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 无效 ` (仅支持整数)';
      }
    };
  },
  /**
   * url校验
   * @param v
   * @param options
   * @param options.filePath
   * @returns {*}
   */
  url: function url(v, options) {
    v = (v || '').toString().trim();
    if (v.match(/^none$/i)) {
      return { value: 'none' };
    }

    var url = REGEXP_URL.exec(v);
    if (url && url[1].trim()) {
      var value = url[1];
      if (!/^data:/.test(value) && !/^http(s)?:/.test(value)) {
        // 转换为以项目源码为根的绝对路径
        value = (0, _utils.resolvePath)(value, options.filePath);
      }
      return { value: value };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'WARNING: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 必须是 none 或者 url(...)';
      }
    };
  },

  /**
   * 位置校验(默认为)
   * @param v
   * @returns {*}
   */
  position: function position(v, units) {
    v = (v || '').toString();
    if (!units) {
      units = cssLengthUnits;
    }

    var items = v.split(/\s+|,/); // 空格或,分隔
    if (items && items.length > 1) {
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;
      if (items.length > 3) {
        logType = 1;
        logs.push('属性数目最多为3个, 忽略多余属性');
      }

      items.forEach(function (it, index) {
        result = validator.length(it, units);
        // 如果校验成功，则保存转换后的属性值
        if ((0, _utils.isValidValue)(result.value)) {
          values.push(result.value);
        }

        if (result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);
          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      return {
        value: logType < 2 ? values.join(' ') : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 命名校验
   * @param {String} v
   * @returns {*}
   */
  name: function name(v) {
    v = (v || '').toString();
    if (v.match(REGEXP_NAME)) {
      return { value: v };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 命名校验
   * @param {String} v
   * @returns {*}
   */
  transform: function transform(v) {
    v = (v || '').toString().trim();
    // 转成数组
    var items = v.split();
    if (items && items.length) {
      var values = {};
      var result = void 0;
      var logs = [];
      var logType = 0;
      // 逐项处理合成对象
      items.forEach(function (it, index) {
        var inMatchs = it.match(REGEXP_TRANSFORM_ITEM);
        if (inMatchs) {
          var value = inMatchs[2];
          var key = inMatchs[1];
          var _validator = transformValidatorMap[key];
          if (typeof _validator === 'function') {
            if (key === 'translate' && !/[,\s]+/.test(value.trim())) {
              // translate(10px) --> translateX(10px),translateY(0px)
              value += ',0px';
            }
            result = _validator(value);

            // 返回值为Array
            if (result.value instanceof Array) {
              result.value.forEach(function (item) {
                if ((0, _utils.isValidValue)(item.v)) {
                  values[item.n] = item.v;
                }
              });
            }
            // 返回值为number或String
            else if ((0, _utils.isValidValue)(result.value)) {
                values[key] = result.value;
              }

            if (result.reason) {
              var str = result.reason(key, value, result.value);
              // 提取日志类型
              var match = str.match(/^([A-Z]+):/);
              if (match) {
                var idx = logTypes.indexOf(match[1]);
                if (logType < logTypes.indexOf(match[1])) {
                  logType = idx;
                }
                str = str.replace(match[0], '').trim();
              }
              logs.push(str);
            }
          } else {
            logs.push('属性 `' + key + '` 不支持');
          }
        } else {
          logType = 2;
          logs.push('属性 `' + index + '` 的值格式不正确');
        }
      });

      return {
        value: (0, _utils.isEmptyObject)(values) ? null : JSON.stringify(values),
        reason: logs.length > 0 ? function (k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 命名校验
   * @param v
   * @returns {*}
   */
  background: function background(v) {
    v = (v || '').toString().trim();
    // 预留接口：分解background所有参数，存入数组
    var items = v.split();
    // 处理多组渐变
    if (v.indexOf('-gradient') > 0) {
      var reg = /(repeating-linear|linear).*?(?=\s*(repeating|linear)|$)/g;
      items = v.match(reg);
    }
    // 初始化返回对象
    var value = {
      values: []
    };
    if (items && items.length) {
      var logs = [];
      var logType = 0;
      // 逐项处理，校验后的值存入value
      items.forEach(function (it) {
        var key = void 0;
        var validator = void 0;

        // 参数分类处理
        // 参数为(repeating-)?linear-gradient(xxx)
        if (it.indexOf('-gradient') >= 0) {
          // (repeating-)?linear-gradient(xxx)按同一种模式校验
          key = it.indexOf('repeating') >= 0 ? 'repeatingLinearGradient' : 'linearGradient';
          validator = backgroundValidatorMap[key];
        }

        if (typeof validator === 'function') {
          var result = validator(it);
          // 如果校验成功，则保存转换后的属性值
          if ((0, _utils.isValidValue)(result.value)) {
            var parseObj = JSON.parse(result.value);
            value.values.push(parseObj);
          }
          if (result.reason) {
            var str = result.reason(key, it, result.value);
            // 提取日志类型
            var match = str.match(/^([A-Z]+):/);
            if (match) {
              var idx = logTypes.indexOf(match[1]);
              if (logType < logTypes.indexOf(match[1])) {
                logType = idx;
              }
              str = str.replace(match[0], '').trim();
            }
            logs.push(str);
          }
        } else {
          logType = 2;
          logs.push('背景类型 `' + it + '`暂不支持');
        }
      });

      return {
        value: logType < 2 ? JSON.stringify(value) : null,
        reason: logs.length > 0 ? function (k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 命名校验
   * @param v
   * @returns {*}
   */
  backgroundSize: function backgroundSize(v, units) {
    v = (v || '').toString().trim();
    if (!units) {
      units = cssLengthUnits;
    }
    var str = void 0;
    var result = void 0;
    var logType = 0;
    var items = v.split(/\s+/);
    if (items.length === 1) {
      if (['cover', 'contain', 'auto'].indexOf(items[0]) > -1) return { value: items[0] };

      result = validator.length(items[0], units);
      if (result.reason) {
        str = result.reason('0', items[0], result.value);
        var match = str.match(/^([A-Z]+):/);
        if (match) {
          logType = logTypes.indexOf(match[1]);
          str = str.replace(match[0], '').trim();
        }
      }
      return {
        value: (0, _utils.isValidValue)(result.value) ? result.value : null,
        reason: str ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + str;
        } : null
      };
    } else if (items.length === 2) {
      var values = [];
      var logs = [];
      items.forEach(function (it, index) {
        if (it === 'auto') {
          values.push(it);
          return;
        }

        // 如果校验成功，则保存转换后的属性值
        result = validator.length(it, units);
        if ((0, _utils.isValidValue)(result.value)) {
          values.push(result.value);
        }
        if (result.reason) {
          str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var _match = str.match(/^([A-Z]+):/);
          if (_match) {
            var idx = logTypes.indexOf(_match[1]);
            if (logType < idx) logType = idx;

            str = str.replace(_match[0], '').trim();
          }
          logs.push(str);
        }
      });

      return {
        value: logType < 2 ? values.join(' ') : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    // 匹配不成功，格式错误
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 命名校验
   * @param v
   * @returns {*}
   */
  backgroundPosition: function backgroundPosition(v, units) {
    v = (v || '').toString().trim();
    if (!units) {
      units = cssLengthUnits;
    }
    var str = void 0;
    var result = void 0;
    var logType = 0;
    var values = [];
    var logs = [];
    var items = v.split(/\s+/);
    if (items.length === 1) {
      if (REGEXP_POSITION.test(items[0])) return { value: items[0] };

      result = validator.length(items[0], units);
      if (result.reason) {
        str = result.reason('0', items[0], result.value);
        var match = str.match(/^([A-Z]+):/);
        if (match) {
          logType = logTypes.indexOf(match[1]);
          str = str.replace(match[0], '').trim();
        }
      }
      return {
        value: (0, _utils.isValidValue)(result.value) ? result.value : null,
        reason: str ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + str;
        } : null
      };
    } else if (items.length === 2) {
      var val1 = items[0];
      var val2 = items[1];

      if (val1 === 'center') {
        // 第一个值为 center是，第二个值可以是 center, top，right，left，bottom，px，%
        if (REGEXP_POSITION.test(val2)) {
          values = items;
        } else {
          result = validator.length(val2, units);
          if ((0, _utils.isValidValue)(result.value)) {
            values = items;
          }

          if (result.reason) {
            str = result.reason('1', val2, result.value);
            var _match2 = str.match(/^([A-Z]+):/);
            if (_match2) {
              var idx = logTypes.indexOf(_match2[1]);
              if (logType < idx) logType = idx;

              str = str.replace(_match2[0], '').trim();
            }
            logs.push(str);
          }
        }
      } else if (['top', 'bottom'].indexOf(val1) > -1 && ['left', 'right', 'center'].indexOf(val2) > -1) {
        // 第一个值为 top/bottom，第二个值可以是 left/right/center
        values = items;
      } else {
        // 第一个值为 px／%／left／right ，第二个值可以是 px/%/top/bottom/center
        result = validator.length(val1, units);
        if (['left', 'right'].indexOf(val1) > -1 || (0, _utils.isValidValue)(result.value)) {
          if (['top', 'bottom', 'center'].indexOf(val2) > -1) {
            values = items;
          } else {
            result = validator.length(val2, units);
            if ((0, _utils.isValidValue)(result.value)) {
              values = items;
            }
            if (result.reason) {
              str = result.reason('1', val2, result.value);
              var _match3 = str.match(/^([A-Z]+):/);
              if (_match3) {
                var _idx = logTypes.indexOf(_match3[1]);
                if (logType < _idx) logType = _idx;

                str = str.replace(_match3[0], '').trim();
              }
              logs.push(str);
            }
          }
        }
      }
      if (!values.length) {
        logType = 2;
        if (!logs.length) logs.push('属性值格式不正确');
      }
      return {
        value: logType < 2 ? values.join(' ') : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    } else if (items.length === 3) {
      var _val = items[0];
      var _val2 = items[1];
      var val3 = items[2];

      if (REGEXP_POSITION.test(_val)) {
        if (REGEXP_POSITION.test(_val2) && (0, _utils.isValidValue)(validator.length(val3, units).value) || REGEXP_POSITION.test(val3) && (0, _utils.isValidValue)(validator.length(_val2, units).value)) {
          values = items;
        }
      }
      if (!values.length) {
        logType = 2;
        if (!logs.length) logs.push('属性值格式不正确');
      }
      return {
        value: logType < 2 ? values.join(' ') : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    } else if (items.length === 4) {
      var _val3 = items[0];
      var _val4 = items[1];
      var _val5 = items[2];
      var val4 = items[3];

      if (REGEXP_POSITION.test(_val3) && REGEXP_POSITION.test(_val5) && (0, _utils.isValidValue)(validator.length(_val4, units).value) && (0, _utils.isValidValue)(validator.length(val4, units).value)) {
        values = items;
      }
      if (!values.length) {
        logType = 2;
        if (!logs.length) logs.push('属性值格式不正确');
      }
      return {
        value: logType < 2 ? values.join(' ') : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    // 匹配不成功，格式错误
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 属性校验
   * @param v
   * @returns {*}
   */
  linearGradient: function linearGradient(v) {
    v = (v || '').toString().trim();
    // 初始化返回对象格式
    var result = {
      type: '',
      directions: ['to', 'bottom'], // 默认从上到下
      values: []
    };

    var objcolor = {};
    var objdirection = {};
    var logs = [];
    var logType = 0;
    // 分离(repeating-)linear-gradient函数名与参数
    var inMatchs = v.match(/^([0-9a-zA-Z-]+)\((.*)\)/);
    if (inMatchs) {
      var key = (0, _utils.hyphenedToCamelCase)(inMatchs[1]);
      result.type = key; // type类型
      var valueList = inMatchs[2].split(/,/);

      // 校验direction或angle部分(非必要参数)
      if (REGEXP_GRADIENT_DIRECTION.test(valueList[0])) {
        var directionValidator = void 0;
        // direction
        if (/(to|bottom|right|left|top)/.test(valueList[0])) {
          directionValidator = backgroundValidatorMap['linearGradientDirection'];
        }
        // angle
        else if (valueList[0].match(REGEXP_ANGLE)) {
            directionValidator = backgroundValidatorMap['linearGradientAngle'];
          }

        if (typeof directionValidator === 'function') {
          objdirection = directionValidator(valueList[0]);
          // 分离direction或angle，剩下color-stop部分
          valueList.splice(0, 1);
          if ((0, _utils.isValidValue)(objdirection.value)) {
            result.directions = objdirection.value.split(/\s+/);
          }
          if (objdirection.reason) {
            var str = objdirection.reason(key, valueList[0], objdirection.value);
            if (str) {
              var match = str.match(/^([A-Z]+):/);
              if (match) {
                var idx = logTypes.indexOf(match[1]);
                if (logType < logTypes.indexOf(match[1])) {
                  logType = idx;
                }
                str = str.replace(match[0], '').trim();
              }
              logs.push(str);
            }
          }
        }
      }

      // 校验color-stop部分
      if (valueList.length > 0) {
        var _validator2 = backgroundValidatorMap['linearGradientColor'];
        objcolor = _validator2(valueList);
        if ((0, _utils.isValidValue)(objcolor.value)) {
          result.values = JSON.parse(objcolor.value);
        }
        if (objcolor.reason) {
          var _str = objcolor.reason(key, valueList, objcolor.value);
          if (_str) {
            var _match4 = _str.match(/^([A-Z]+):/);
            if (_match4) {
              var _idx2 = logTypes.indexOf(_match4[1]);
              if (logType < logTypes.indexOf(_match4[1])) {
                logType = _idx2;
              }
              _str = _str.replace(_match4[0], '').trim();
            }
            logs.push(_str);
          }
        }
      } else {
        logType = 2;
        logs.push('参数 `' + v + '`缺少过渡颜色');
      }

      return {
        value: logType < 2 ? JSON.stringify(result) : null,
        reason: logs.length > 0 ? function (k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    // 匹配不成功，格式错误
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },
  /**
   * 命名校验
   * @param v
   * @returns {*}
   */
  time: function time(v) {
    v = (v || '').toString();
    var match = v.match(REGEXP_TIME);

    if (match) {
      // 尝试检查单位
      var unit = match[1];
      if (!unit) {
        return {
          value: parseFloat(v) + cssTimeUnits[0],
          reason: function reason(k, v, result) {
            return 'WARNING: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 没有指定单位，默认为 `' + cssTimeUnits[0] + '`';
          }
        };
      } else if (cssTimeUnits.indexOf(unit.toLowerCase()) >= 0) {
        // 如果单位合法
        return { value: v };
      } else {
        // 其余格式单位，一律默认为ms
        var msv = parseFloat(v);
        // TODO: 暂时实现s到ms的转换
        if (unit.toLowerCase() === 's') {
          msv = Math.round(msv * 1000);
          return {
            value: msv + cssTimeUnits[0],
            reason: function reason(k, v, result) {
              return 'WARNING: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 不支持单位 `' + unit + '`, 自动转换为 `' + cssTimeUnits[0] + '`';
            }
          };
        }

        return {
          value: msv + cssTimeUnits[0],
          reason: function reason(k, v, result) {
            return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 不支持单位 `' + unit + '`, 目前仅支持 `' + JSON.stringify(cssTimeUnits) + '`';
          }
        };
      }
    }
    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 的值不正确 `' + v + '` (仅支持数值)';
      }
    };
  },

  /**
   * 角度校验
   * @param v
   * @returns {*}
   */
  angle: function angle(v) {
    v = (v || '').toString().trim();
    var match = v.match(REGEXP_ANGLE);

    if (match) {
      // 尝试检查单位
      var unit = match[1];
      if (!unit) {
        return {
          value: parseFloat(v) + cssAngleUnits[0],
          reason: function reason(k, v, result) {
            return 'WARNING: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 没有指定单位，默认为 `' + cssAngleUnits[0] + '`';
          }
        };
      } else if (cssAngleUnits.indexOf(unit.toLowerCase()) >= 0) {
        // 如果单位合法
        return { value: v };
      } else {
        // 其余格式单位，一律默认为ms
        var msv = parseFloat(v);
        // TODO: 暂时实现rad到deg的转换
        if (unit.toLowerCase() === 'rad') {
          msv = Math.round(msv * 180 / Math.PI);
          return {
            value: msv + cssAngleUnits[0],
            reason: function reason(k, v, result) {
              return 'WARNING: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 不支持单位 `' + unit + '`, 自动转换为 `' + cssAngleUnits[0] + '`';
            }
          };
        }

        return {
          value: msv + cssAngleUnits[0],
          reason: function reason(k, v, result) {
            return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 不支持单位 `' + unit + '`, 目前仅支持 `' + JSON.stringify(cssAngleUnits) + '`';
          }
        };
      }
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性 `' + (0, _utils.camelCaseToHyphened)(k) + '` 的值不正确 `' + v + '` (仅支持数值)';
      }
    };
  },

  /**
   * 枚举值校验
   * @param list
   * @param v
   * @returns {*}
   */
  enum: function _enum(list, v) {
    var index = list.indexOf(v);
    if (index > 0) {
      return { value: v };
    }
    if (index === 0) {
      return {
        value: v,
        // 关闭默认值的提示
        reason: false && function reason(k, v, result) {
          return 'NOTE:  属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 是缺省值(可以忽略不写)';
        }
      };
    } else {
      return {
        value: null,
        reason: function reason(k, v, result) {
          return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 无效 ` (有效枚举值为: `' + list.join('`|`') + '`)';
        }
      };
    }
  },

  /**
   * gradient方向校验
   * @param v
   * @returns {*}
   * @constructor
   */
  gradientdirection: function gradientdirection(v) {
    v = (v || '').toString().trim();
    // 空格分开的字符串转化为数组
    var items = v.split(/\s+/);
    var mismatch = [];
    var arr = [];
    items.forEach(function (it) {
      if (it === 'to') {
        arr.push(0);
      } else if (it === 'top' | it === 'bottom') {
        arr.push(1);
      } else if (it === 'left' | it === 'right') {
        arr.push(2);
      } else {
        // 出现(to|left|top|right|bottom)以外的参数
        mismatch.push(it);
      }
    });

    if (mismatch.length === 0 && arr.length > 1 && arr.length < 4) {
      if (arr[0] === 0 && arr[1] !== 0) {
        // 存在第三个参数
        if (arr[2]) {
          // 非相邻组合或第三个参数为‘to’
          if (arr[1] + arr[2] !== 3) {
            mismatch = items;
          }
        }
      } else {
        mismatch = items;
      }
    } else {
      mismatch = items;
    }

    return {
      value: mismatch.length > 0 ? null : items.join(' '),
      reason: mismatch.length > 0 ? function reason(k, v, result) {
        return 'ERROR:  属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的属性值 `' + mismatch.join(' ') + '` 格式不正确 `)';
      } : null
    };
  },

  /**
   * 数组长度值校验, 包括padding, margin, border-width, translate
   * @param {String} v
   * @param {Array} units - 支持的单位
   * @returns {*}
   */
  arraylength: function arraylength(names, v, units) {
    v = (v || '').toString().trim();
    // 空格或逗号分隔
    var items = v.split(/[,\s]+/);

    if (items && items.length <= names.length) {
      // logType为当前日志类型在logTypes数组对应的下标
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;

      items.forEach(function (it, index) {
        result = validator.length(it, units);

        // 如果校验成功，则保存转换后的属性值
        if ((0, _utils.isValidValue)(result.value)) {
          values.push(result.value);
        }

        if (result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);

          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      return {
        value: logType < 2 ? (0, _utils.splitAttr)(names, values) : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 数组颜色值校验, 包括border-color
   * @param v
   * @returns {*}
   * @constructor
   */
  arraycolor: function arraycolor(names, v) {
    v = (v || '').toString();
    var items = v.match(REGEXP_ARRAYCOLOR);

    if (items && items.length <= 4) {
      // logType为当前日志类型在logTypes数组对应的下标
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;

      items.forEach(function (it, index) {
        result = validator.color(it);

        // 如果校验成功，则保存转换后的属性值
        if ((0, _utils.isValidValue)(result.value)) {
          values.push(result.value);
        }

        if (result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);

          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      return {
        value: logType < 2 ? (0, _utils.splitAttr)(names, values) : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * 渐变参数color-stop值校验, 渐变宽度、百分比
   * @param v
   * @returns {*}
   */
  arraycolorstop: function arraycolorstop(v) {
    v = (v || '').toString().trim();
    // 匹配color-stop组合
    var items = v.match(REGEXP_ARRAYCOLORSTOP);

    // 至少指定两种颜色
    if (items && items.length > 1) {
      var value = [];
      var logs = [];
      var logType = 0;

      items.forEach(function (it, index) {
        // 匹配stop部分
        var arrstop = it.match(/[\s]+[-+0-9]+(px|%)?$/);
        // 存放color与stop校验后的值
        var groupvalue = [];

        // 校验stop部分
        if (arrstop) {
          var objstop = validator.length(arrstop[0]);
          var num = it.indexOf(arrstop[0]);
          // 得到color部分
          it = it.substring(0, num);
          if ((0, _utils.isValidValue)(objstop.value)) {
            groupvalue.push(objstop.value);
          }

          if (objstop.reason) {
            var str = objstop.reason(index.toString(), arrstop[0], objstop.value);
            // 提取日志类型
            var match = str.match(/^([A-Z]+):/);
            if (match) {
              var idx = logTypes.indexOf(match[1]);
              if (logType < logTypes.indexOf(match[1])) {
                logType = idx;
              }
              str = str.replace(match[0], '').trim();
            }
            logs.push(str);
          }
        }

        if (it) {
          var objcolor = validator.color(it);
          // 如果校验成功，则保存转换后的属性值
          if ((0, _utils.isValidValue)(objcolor.value)) {
            // 校验后的color放到stop之前前
            groupvalue.unshift(objcolor.value);
          }

          // 存入校验后的color-stop值
          value.push(groupvalue.join(' '));
          if (objcolor.reason) {
            var _str2 = objcolor.reason(index.toString(), it, objcolor.value);
            // 提取日志类型
            var _match5 = _str2.match(/^([A-Z]+):/);
            if (_match5) {
              var _idx3 = logTypes.indexOf(_match5[1]);
              if (logType < logTypes.indexOf(_match5[1])) {
                logType = _idx3;
              }
              _str2 = _str2.replace(_match5[0], '').trim();
            }
            logs.push(_str2);
          }
        } else {
          logType = 2;
          logs.push('参数 `' + v + '` 格式不正确');
        }
      });

      return {
        value: logType < 2 ? JSON.stringify(value) : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确，至少指定两种颜色';
      }
    };
  },

  /**
   * mylocation校验: mylocation
   * @param v
   * @param units 支持的单位
   * @returns {*}
   * @constructor
   */
  mylocation: function mylocation(v, options) {
    v = (v || '').toString();
    // 空格分隔
    var items = v.split(/\s+/);

    if (items && items.length <= 3) {
      // logType为当前日志类型在logTypes数组对应的下标，typeList记录简写属性对应的类别数组
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;
      var typeList = [];
      var prevType = -1;

      items.forEach(function (it, index) {
        // 检测简写属性值的合法性，如果校验成功，则保存转换后的属性值和类别
        if ((0, _utils.isValidValue)(validator.color(it).value)) {
          // 前两个值都是颜色
          typeList.push(index);
          if (index === 0) {
            // 如果只有一个颜色，就按照顺序分给mylocationFillColor
            result = validatorMap['mylocationFillColor'](it);
            values.push({
              n: 'mylocationFillColor',
              v: result.value
            });
          } else if (index === 1) {
            result = validatorMap['mylocationStrokeColor'](it);
            values.push({
              n: 'mylocationStrokeColor',
              v: result.value
            });
          }
        } else if ((0, _utils.isValidValue)(validator.url(it, options).value)) {
          typeList.push(2);
          result = validatorMap['mylocationIconPath'](it, options);
          values.push({
            n: 'mylocationIconPath',
            v: result.value
          });
        } else {
          result = {};
          logType = 2;
          logs.push('属性`' + index + '` 的值 `' + it + '` 存在问题: \n  不满足fillColor、strokeColor和iconPath的检验标准');
        }

        if (result && result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);

          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      // 检测简写属性值中width、style和color的顺序是否符合标准
      typeList.forEach(function (it) {
        if (it > prevType) {
          prevType = it;
        } else {
          logType = 2;
          logs.push('必须按顺序设置属性fillColor、strokeColor和iconPath');
        }
      });

      return {
        value: logType < 2 ? values : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * border校验: border
   * @param v
   * @param units 支持的单位
   * @returns {*}
   * @constructor
   */
  border: function border(v, units) {
    v = (v || '').toString();
    // 空格分隔
    var items = v.split(/\s+/);

    if (items && items.length <= 3) {
      // logType为当前日志类型在logTypes数组对应的下标，typeList记录简写属性对应的类别数组
      var values = [];
      var result = void 0;
      var logs = [];
      var logType = 0;
      var typeList = [];
      var prevType = -1;

      items.forEach(function (it, index) {
        // 检测简写属性值的合法性，区分值为width、style和color的情况,如果校验成功，则保存转换后的属性值和类别
        if ((0, _utils.isValidValue)(validator.length(it, units).value)) {
          typeList.push(0);
          result = validatorMap['borderWidth'](it);
          if (result.value instanceof Array) {
            values = values.concat(result.value);
          }
        } else if ((0, _utils.isValidValue)(validatorMap['borderStyle'](it).value)) {
          typeList.push(1);
          result = validatorMap['borderStyle'](it);
          values.push({
            n: 'borderStyle',
            v: it
          });
        } else if ((0, _utils.isValidValue)(validator.color(it).value)) {
          typeList.push(2);
          result = validatorMap['borderColor'](it);
          if (result.value instanceof Array) {
            values = values.concat(result.value);
          }
        } else {
          result = {};
          logType = 2;
          logs.push('属性`' + index + '` 的值 `' + it + '` 存在问题: \n  不满足width、style和color的检验标准');
        }

        if (result && result.reason) {
          var str = result.reason(index.toString(), it, result.value);
          // 提取日志类型
          var match = str.match(/^([A-Z]+):/);

          if (match) {
            var idx = logTypes.indexOf(match[1]);
            if (logType < logTypes.indexOf(match[1])) {
              logType = idx;
            }
            str = str.replace(match[0], '').trim();
          }
          logs.push(str);
        }
      });

      // 检测简写属性值中width、style和color的顺序是否符合标准
      typeList.forEach(function (it) {
        if (it > prevType) {
          prevType = it;
        } else {
          logType = 2;
          logs.push('必须按顺序设置属性width style color');
        }
      });

      return {
        value: logType < 2 ? values : null,
        reason: logs.length > 0 ? function reason(k, v, result) {
          return logTypes[logType] + ': 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 存在问题: \n  ' + logs.join('\n  ');
        } : null
      };
    }

    return {
      value: null,
      reason: function reason(k, v, result) {
        return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 格式不正确';
      }
    };
  },

  /**
   * display兼容性'block'校验
   * @param v
   * @returns {*}
   * @constructor
   */
  display: function display(v) {
    v = (v || '').toString();
    var list = ['flex', 'none'];
    var index = list.indexOf(v);
    if (index > 0) {
      return { value: v };
    }
    if (v === 'block') {
      return {
        value: 'flex',
        reason: function reason(k, v, result) {
          return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 需修改为flex ` (有效枚举值为: `' + list.join('`|`') + '`)';
        }
      };
    }
    if (index === 0) {
      return {
        value: v,
        // 关闭默认值的提示
        reason: false && function reason(k, v, result) {
          return 'NOTE:  属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 是缺省值(可以忽略不写)';
        }
      };
    } else {
      return {
        value: null,
        reason: function reason(k, v, result) {
          return 'ERROR: 属性`' + (0, _utils.camelCaseToHyphened)(k) + '` 的值 `' + v + '` 无效 ` (有效枚举值为: `' + list.join('`|`') + '`)';
        }
      };
    }
  }

  /**
   * 生成指定单位的长度校验函数
   * @param list
   * @returns {validator_length}
   */
};function _lengthValidator(list, v) {
  return validator.length(v, list);
}
function makeLengthValidator(units) {
  return _lengthValidator.bind(null, units);
}

/**
 * 生成枚举类型校验函数
 * @param list
 * @returns {validator_enum}
 */
function makeEnumValidator(list) {
  return validator.enum.bind(null, list);
}

/**
 * 生成指定类型的简写属性校验函数
 * @param type  简写属性校验函数类型
 * @param list  拆分后的样式名数组
 * @returns {validator_$type}
 */
function makeAbbrAttrValidator(type, list) {
  return validator[type].bind(null, list);
}

// background属性校验表
var backgroundValidatorMap = {
  linearGradient: validator.linearGradient,
  repeatingLinearGradient: validator.linearGradient,
  linearGradientColor: validator.arraycolorstop,
  linearGradientAngle: validator.angle,
  linearGradientDirection: validator.gradientdirection
};

var transformValidatorMap = {
  translate: makeAbbrAttrValidator('arraylength', ['translateX', 'translateY']),
  translateX: makeLengthValidator(['px', '%']),
  translateY: makeLengthValidator(['px', '%']),
  scale: makeAbbrAttrValidator('arraynumber', ['scaleX', 'scaleY']),
  scaleX: validator.number,
  scaleY: validator.number,
  rotate: validator.angle,
  rotateX: validator.angle,
  rotateY: validator.angle

  // CSS属性校验器映射表
};var validatorMap = {
  // boxModel
  width: validator.length,
  height: validator.length,
  padding: makeAbbrAttrValidator('arraylength', ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft']),
  paddingLeft: validator.length,
  paddingRight: validator.length,
  paddingTop: validator.length,
  paddingBottom: validator.length,
  margin: makeAbbrAttrValidator('arraylength', ['marginTop', 'marginRight', 'marginBottom', 'marginLeft']),
  marginLeft: validator.length,
  marginRight: validator.length,
  marginTop: validator.length,
  marginBottom: validator.length,
  border: validator.border,
  borderWidth: makeAbbrAttrValidator('arraylength', ['borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth']),
  borderLeftWidth: validator.length,
  borderTopWidth: validator.length,
  borderRightWidth: validator.length,
  borderBottomWidth: validator.length,
  borderColor: makeAbbrAttrValidator('arraycolor', ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor']),
  borderLeftColor: validator.color,
  borderTopColor: validator.color,
  borderRightColor: validator.color,
  borderBottomColor: validator.color,
  borderStyle: makeEnumValidator(['solid', 'dotted', 'dashed']),
  borderRadius: validator.length,
  borderBottomLeftRadius: validator.length,
  borderBottomRightRadius: validator.length,
  borderTopLeftRadius: validator.length,
  borderTopRightRadius: validator.length,
  indicatorSize: validator.length,
  // flexbox
  flex: validator.number,
  flexGrow: validator.number,
  flexShrink: validator.number,
  flexBasis: validator.length,
  flexDirection: makeEnumValidator(['row', 'column']),
  flexWrap: makeEnumValidator(['nowrap', 'wrap', 'wrap-reverse']),
  justifyContent: makeEnumValidator(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),
  alignItems: makeEnumValidator(['stretch', 'flex-start', 'flex-end', 'center']),
  alignContent: makeEnumValidator(['stretch', 'flex-start', 'flex-end', 'center', 'space-between', 'space-around']),
  alignSelf: makeEnumValidator(['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch']),
  // position
  position: makeEnumValidator(['none', 'fixed']),
  top: validator.length,
  bottom: validator.length,
  left: validator.length,
  right: validator.length,
  zIndex: validator.integer,
  // common
  opacity: validator.number,
  background: validator.background,
  backgroundColor: validator.color,
  backgroundImage: validator.url,
  backgroundSize: validator.backgroundSize,
  backgroundRepeat: makeEnumValidator(['no-repeat', 'repeat', 'repeat-x', 'repeat-y']),
  backgroundPosition: validator.backgroundPosition,
  display: validator.display,
  visibility: makeEnumValidator(['visible', 'hidden']),
  // text
  lines: validator.integer,
  color: validator.color,
  fontSize: validator.length,
  fontStyle: makeEnumValidator(['normal', 'italic']),
  fontWeight: makeEnumValidator(['normal', 'bold']),
  textDecoration: makeEnumValidator(['none', 'underline', 'line-through']),
  textAlign: makeEnumValidator(['left', 'center', 'right']),
  lineHeight: validator.length,
  textOverflow: makeEnumValidator(['clip', 'ellipsis']),
  // animation
  transform: validator.transform,
  transformOrigin: validator.position,
  animationName: validator.name,
  animationDuration: validator.time,
  animationTimingFunction: makeEnumValidator(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out']),
  animationDelay: validator.time,
  animationIterationCount: validator.iterationcount,
  animationFillMode: makeEnumValidator(['none', 'forwards']),
  // custom
  placeholderColor: validator.color,
  selectedColor: validator.color,
  textColor: validator.color,
  timeColor: validator.color,
  textHighlightColor: validator.color,
  strokeWidth: validator.length,
  progressColor: validator.color,
  indicatorColor: validator.color,
  indicatorSelectedColor: validator.color,
  slideWidth: validator.length,
  slideMargin: validator.length,
  resizeMode: makeEnumValidator(['cover', 'contain', 'stretch', 'center']),
  columns: validator.number,
  columnSpan: validator.number,
  maskColor: validator.color,
  mylocation: validator.mylocation,
  mylocationFillColor: validator.color,
  mylocationStrokeColor: validator.color,
  mylocationIconPath: validator.url,
  // custom style
  starBackground: validator.url,
  starForeground: validator.url,
  starSecondary: validator.url

  /**
   * 校验CSS属性
   * @param name
   * @param value
   * @param options
   * @param options.filePath 当前文件路径
   * @returns {{value: *, log: *}}
   */

};function validate(name, value, options) {
  var result = void 0,
      log = void 0;
  var validator = validatorMap[name];

  if (typeof validator === 'function') {
    if (typeof value !== 'function') {
      if (mightReferlocalResource(name)) {
        result = validator(value, options);
      } else {
        result = validator(value);
      }
    } else {
      // 如果样式值是函数，则跳过校验
      result = { value: value };
    }

    if (result.reason) {
      log = { reason: result.reason(name, value, result.value) };
    }
  } else {
    // 如果没有类型校验器, 未知样式
    result = { value: value };
    log = { reason: 'ERROR: 样式名`' + (0, _utils.camelCaseToHyphened)(name) + '`不支持' };
  }

  return {
    value: result.value instanceof Array ? result.value : [{ n: name, v: result.value }],
    log: log
  };
}

/**
 * @param name
 * @desc 判断可能引用本地资源的css样式
 */
function mightReferlocalResource(name) {
  return ['mylocation', 'mylocationIconPath', 'backgroundImage', 'starForeground', 'starSecondary', 'starBackground'].indexOf(name) > -1;
}

function validatePseudoClass(cls) {
  cls = cls.replace(/^(:)/, '');
  return cssPseudoClasses.indexOf(cls.toLowerCase()) >= 0;
}

function validatePseudoElement(elm) {
  elm = elm.replace(/^(:)/, '');
  return cssPseudoElements.indexOf(elm.toLowerCase()) >= 0;
}

module.exports = {
  colorNames: colorNames,
  validatorMap: validatorMap,
  validator: validator,
  validate: validate,
  validatePseudoClass: validatePseudoClass,
  validatePseudoElement: validatePseudoElement,
  enumValidatorFactory: makeEnumValidator
};