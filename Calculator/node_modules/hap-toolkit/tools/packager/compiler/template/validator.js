'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _exp = require('./exp');

var _exp2 = _interopRequireDefault(_exp);

var _style = require('../style');

var _style2 = _interopRequireDefault(_style);

var _info = require('../../common/info');

var info = _interopRequireWildcard(_info);

var _utils = require('../../common/utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 保留标签名
/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

var RESERVED_TAGS = Object.keys(_utils.FRAG_TYPE).map(function (k) {
  return _utils.FRAG_TYPE[k];
});

// 公共属性定义
var tagCommon = {
  events: ['click', 'focus', 'blur', 'longpress', 'appear', 'disappear', 'swipe'],
  attrs: {
    id: {},
    style: {},
    class: {},
    disabled: {
      enum: ['false', 'true']
    },
    if: {
      def: 'true' // 缺省值
    },
    elif: {
      def: 'true'
    },
    else: {},
    for: {},
    tid: {},
    show: {
      def: 'true'
    }
  },
  children: ['block', 'slot'], // 通用控制组件
  parents: ['block'] // 通用父组件


  // 原生标签定义
  // atomic: 不允许有子节点，但允许#text内容
};var tagNatives = {
  div: {},
  a: {
    textContent: true,
    children: ['span'],
    attrs: {
      visited: {
        enum: ['false', 'true']
      },
      href: {}
    }
  },
  text: {
    textContent: true,
    children: ['a', 'span'],
    attrs: {
      type: {
        enum: ['text', 'html']
      }
    }
  },
  span: {
    textContent: true,
    atomic: true,
    excludeRoot: true,
    parents: ['text', 'a'],
    attrs: {
      extendCommon: false, // 不支持通用属性
      id: {},
      style: {},
      class: {},
      for: {},
      tid: {},
      if: {
        def: 'true'
      },
      elif: {
        def: 'true'
      },
      else: {}
    }
  },
  label: {
    textContent: true,
    atomic: true,
    attrs: {
      target: {}
    }
  },
  image: {
    selfClosing: true,
    alias: ['img'],
    atomic: true,
    attrs: {
      src: {},
      alt: {}
    }
  },
  slider: {
    selfClosing: true,
    atomic: true,
    attrs: {
      enabled: {
        enum: ['true', 'false']
      },
      min: {
        def: 0
      },
      max: {
        def: 100
      },
      step: {
        def: 1
      },
      value: {
        def: 0
      }
    },
    events: ['change']
  },
  web: {
    atomic: true,
    events: ['pagestart', 'pagefinish', 'titlereceive', 'error'],
    attrs: {
      src: {},
      allowthirdpartycookies: {
        enum: ['false', 'true']
      }
    }
  },
  list: {
    children: ['list-item'],
    attrs: {
      scrollpage: {
        enum: ['false', 'true']
      }
    },
    events: ['scroll', 'scrollbottom', 'scrolltop']
  },
  'list-item': {
    excludeRoot: true,
    parents: ['list'],
    attrs: {
      type: {
        required: true
      }
    }
  },
  block: {
    excludeRoot: true,
    attrs: {
      extendCommon: false, // 不支持通用属性
      for: {},
      tid: {},
      if: {
        def: 'true'
      },
      elif: {
        def: 'true'
      },
      else: {}
    }
  },
  slot: {
    selfClosing: true,
    atomic: true,
    excludeRoot: true,
    attrs: {
      extendCommon: false, // 不支持通用属性
      content: {}
    }
  },
  input: {
    selfClosing: true,
    atomic: true,
    attrs: {
      type: {
        enum: ['text', 'button', 'checkbox', 'radio', 'email', 'date', 'time', 'number', 'password']
      },
      enterkeytype: {
        enum: ['default', 'next', 'go', 'done', 'send', 'search']
      },
      maxlength: {},
      checked: {
        enum: ['false', 'true']
      },
      name: {},
      value: {},
      placeholder: {}
    },
    events: ['change', 'enterkeyclick']
  },
  button: {
    textContent: true,
    atomic: true
  },
  refresh: {
    attrs: {
      offset: {
        def: '132px'
      },
      refreshing: {
        enum: ['false', 'true']
      }
    },
    events: ['refresh']
  },
  swiper: {
    attrs: {
      index: {
        def: 0
      },
      autoplay: {
        enum: ['false', 'true']
      },
      interval: {
        def: 3000
      },
      indicator: {
        enum: ['true', 'false']
      },
      loop: {
        enum: ['true', 'false']
      }
    },
    events: ['change']
  },
  progress: {
    selfClosing: true,
    atomic: true,
    attrs: {
      percent: {
        def: 0
      },
      type: {
        enum: ['horizontal', 'circular']
      }
    }
  },
  picker: {
    selfClosing: true,
    atomic: true,
    attrs: {
      type: {
        required: true,
        enum: ['text', 'date', 'time', 'multi-text']
      },
      start: {
        def: '1970-1-1'
      },
      end: {
        def: '2100-12-31'
      },
      range: {},
      selected: {},
      value: {}
    },
    events: ['change', 'columnchange', 'cancel']
  },
  switch: {
    selfClosing: true,
    atomic: true,
    attrs: {
      checked: {
        enum: ['false', 'true']
      }
    },
    events: ['change']
  },
  textarea: {
    atomic: true,
    textContent: true,
    attrs: {
      placeholder: {},
      maxlength: {}
    },
    events: ['change']
  },
  video: {
    atomic: true,
    attrs: {
      src: {},
      autoplay: {
        enum: ['false', 'true']
      },
      controls: {
        enum: ['true', 'false']
      },
      poster: {}
    },
    events: ['prepared', 'start', 'pause', 'finish', 'error', 'seeking', 'seeked', 'timeupdate', 'fullscreenchange']
  },
  map: {
    atomic: true,
    selfClosing: true,
    attrs: {
      latitude: {},
      longitude: {},
      coordtype: {},
      scale: {
        def: 0
      },
      rotate: {
        def: 0
      },
      markers: {},
      showmylocation: {
        enum: ['true', 'false']
      },
      polylines: {},
      circles: {},
      controls: {},
      groundoverlays: {},
      includepoints: {}
    },
    events: ['loaded', 'regionchange', 'tap', 'markertap', 'callouttap', 'controltap']
  },
  canvas: {
    atomic: true
  },
  stack: {},
  richtext: {
    textContent: true,
    atomic: true,
    attrs: {
      type: {
        required: true,
        enum: ['html'].concat(info.name.richtextType)
      }
    }
  },
  tabs: {
    children: ['tab-bar', 'tab-content'],
    attrs: {
      index: {
        def: 0
      }
    },
    events: ['change']
  },
  'tab-content': {
    parents: ['tabs']
  },
  'tab-bar': {
    parents: ['tabs'],
    attrs: {
      mode: {
        enum: ['fixed', 'scrollable']
      }
    }
  },
  popup: {
    children: ['text'],
    attrs: {
      target: {
        required: true
      },
      placement: {
        enum: ['left', 'top', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight'],
        def: 'bottom'
      }
    },
    events: ['visibilitychange']
  },
  rating: {
    atomic: true,
    attrs: {
      numstars: {
        def: '5'
      },
      rating: {
        def: '0'
      },
      stepsize: {
        def: '0.5'
      },
      indicator: {
        enum: ['false', 'true']
      }
    },
    events: ['change']
  },
  select: {
    children: ['option'],
    events: ['change'],
    excludeRoot: true
  },
  option: {
    parents: ['select'],
    atomic: true,
    textContent: true,
    attrs: {
      selected: {
        def: false
      },
      value: {}
    },
    excludeRoot: true
  }

  // 保留标签
};var tagReserved = [];
// 标签别名
var tagAliasMap = {};
// 标签属性
var tagAttrMap = {};
var tagEnumAttrMap = {};
var tagDefaultAttrMap = {};
var tagRequireAttrMap = {};
// 原子标签
var tagAtomics = [];
// 带文本内容的标签
var tagTextCotent = [];
// 允许子节点
var tagChildrenMap = {};
// 允许父节点
var tagParentsMap = {};
// 允许事件
var tagEventsMap = {};
// 不能作为根节点
var tagNotRoot = [];(function initRules() {
  Object.keys(tagNatives).forEach(function (tagName) {
    tagReserved.push(tagName);

    var tagInfo = tagNatives[tagName];
    if (tagInfo.atomic) {
      tagAtomics.push(tagName);
    }
    if (tagInfo.textContent) {
      tagTextCotent.push(tagName);
    }
    if (tagInfo.alias && tagInfo.alias.length) {
      tagInfo.alias.forEach(function (n) {
        tagAliasMap[n] = tagName;
      });
    }
    if (tagInfo.excludeRoot === true) {
      tagNotRoot.push(tagName);
    }

    // 处理属性
    var attrsMap = (0, _utils.extend)({}, tagInfo.attrs);
    var enumAttr = {};
    var defaultAttr = {};
    var requireAttr = [];
    // 合并标签的通用属性
    if (!(tagInfo.attrs && tagInfo.attrs.extendCommon === false)) {
      attrsMap = (0, _utils.extend)(attrsMap, tagCommon.attrs);
    }
    // 从属性中去除通用属性标志位
    if ('extendCommon' in attrsMap) {
      delete attrsMap.extendCommon;
    }
    Object.keys(attrsMap).forEach(function (name) {
      var attr = attrsMap[name];
      if (attr.enum && attr.enum.length > 0) {
        enumAttr[name] = attr.enum;
        defaultAttr[name] = attr.enum[0];
      }
      if (attr.def) {
        defaultAttr[name] = attr.def;
      }
      if (attr.required === true) {
        requireAttr.push(name);
      }
    });
    tagAttrMap[tagName] = attrsMap;
    tagEnumAttrMap[tagName] = enumAttr;
    tagDefaultAttrMap[tagName] = defaultAttr;
    tagRequireAttrMap[tagName] = requireAttr;

    // 处理子节点
    tagChildrenMap[tagName] = tagInfo.children ? (0, _utils.merge)([], tagCommon.children, tagInfo.children) : null;

    // 处理父节点
    tagParentsMap[tagName] = tagInfo.parents ? (0, _utils.merge)([], tagCommon.parents, tagInfo.parents) : null;

    // 处理事件
    tagEventsMap[tagName] = (0, _utils.merge)([], tagCommon.events, tagInfo.events);
  });
})();

/**
 * 检查标签名
 * @param node
 * @param output
 */
function checkTagName(node, output) {
  var result = output.result;
  var log = output.log;

  var tagName = node.tagName;
  var childNodes = node.childNodes || [];
  var location = node.__location || {};

  // 处理别名
  if (tagAliasMap[tagName]) {
    if (tagName !== 'img') {
      // `parse5`自动将image转换为img
      log.push({
        line: location.line || 1,
        column: location.col || 1,
        reason: 'NOTE: 组件名 `' + tagName + '` 自动转换为 `' + tagAliasMap[tagName] + '`'
      });
    }
    tagName = tagAliasMap[tagName];
  }

  // 如果是组件标签
  result.type = tagName;
  if (RESERVED_TAGS.indexOf(tagName) >= 0) {
    log.push({
      line: location.line || 1,
      column: location.col || 1,
      reason: 'ERROR: 组件名 `' + tagName + '` 非法, 请修改'
    });
  }

  // 检测根组件合法性
  if (node._isroot && tagNotRoot.indexOf(tagName) >= 0) {
    log.push({
      line: location.line || 1,
      column: location.col || 1,
      reason: 'ERROR: 组件 `' + tagName + '` 不能作为根组件'
    });
  }

  // 如果是原子标签
  if (tagAtomics.indexOf(tagName) >= 0) {
    // 如果没有文本内容
    if (tagTextCotent.indexOf(tagName) < 0) {
      // 非文本节点
      if (childNodes.length > 0) {
        // 不处理#text子节点
        childNodes.every(function (child) {
          if (child.nodeName !== '#text') {
            log.push({
              line: location.line || 1,
              column: location.col || 1,
              reason: 'ERROR: 组件 `' + tagName + '` 是原子类型，不应该有子节点'
            });
            return false;
          }
          return true;
        });
      }
    } else {
      // 文本节点
      if (childNodes.length > 1 || childNodes[0] && childNodes[0].nodeName !== '#text') {
        // 只能是文本内容，否则报错
        log.push({
          line: location.line || 1,
          column: location.col || 1,
          reason: 'ERROR: 组件 `' + tagName + '` 只能有一个文字子节点'
        });
      }
    }
  }

  // attr为空时，设置返回的attr的默认值
  result.attr = result.attr || {};
  // 处理必需属性
  var attrs = node.attrs || [];
  // 标签的属性列表
  var attrlist = [];
  // 转换为小写
  attrs.forEach(function (item) {
    attrlist.push(item.name.toLowerCase());
  });

  // 处理缺省属性(如果值为空, 则设置为缺省值)
  if (tagDefaultAttrMap[tagName]) {
    Object.keys(tagDefaultAttrMap[tagName]).forEach(function (name) {
      var index = attrlist.indexOf(name);
      if (index >= 0 && attrs[index].value === '') {
        attrs[index].value = tagDefaultAttrMap[tagName][name];
        log.push({
          line: location.line || 1,
          column: location.col || 1,
          reason: 'ERROR: 组件 `' + tagName + '` 属性 `' + name + '` 值为空, 默认设置为缺省值 `' + tagDefaultAttrMap[tagName][name] + '`'
        });
      }
    });
  }

  // 检查根节点属性合法性
  if (node._isroot) {
    var rootExcludeAttrList = ['for', 'if', 'elif', 'else', 'show'];
    attrlist.forEach(function (name) {
      if (rootExcludeAttrList.indexOf(name) >= 0) {
        log.push({
          line: location.line || 1,
          column: location.col || 1,
          reason: 'ERROR: 根节点 `' + tagName + '` 不能使用属性 `' + name + '`'
        });
      }
    });
  }

  // 检查必需的属性
  if (tagRequireAttrMap[tagName]) {
    tagRequireAttrMap[tagName].forEach(function (name) {
      if (attrlist.indexOf(name) < 0) {
        log.push({
          line: location.line || 1,
          column: location.col || 1,
          reason: 'ERROR: 组件 `' + tagName + '` 没有定义属性 `' + name + '`'
        });
      }
    });
  }

  // 检查属性枚举值的合法性
  if (tagEnumAttrMap[tagName]) {
    Object.keys(tagEnumAttrMap[tagName]).forEach(function (name) {
      var index = attrlist.indexOf(name);
      if (index >= 0) {
        var value = attrs[index].value;
        if (!_exp2.default.isExpr(value)) {
          // 如果是表达式，则跳过检测
          var enums = tagEnumAttrMap[tagName][name];
          if (enums.indexOf(value) < 0) {
            attrs[index].value = enums[0];
            log.push({
              line: location.line || 1,
              column: location.col || 1,
              reason: 'ERROR: 组件 `' + tagName + '` 属性 `' + name + '` 的值 `' + value + '`非法, 默认设置为缺省值 `' + enums[0] + '`'
            });
          }
        }
      }
    });
  }

  // 检查属性的合法性
  if (tagAttrMap[tagName]) {
    attrlist.forEach(function (item) {
      if (!item.match(/^(on|@)/)) {
        // 避开事件,校验属性值
        if (!(item in tagAttrMap[tagName])) {
          log.push({
            line: location.line || 1,
            column: location.col || 1,
            reason: 'ERROR: 组件 `' + tagName + '` 不支持属性 `' + item + '`，支持的属性有 [' + Object.keys(tagAttrMap[tagName]).join(', ') + ']'
          });
        }
      }
    });
  }

  // 检查事件合法性
  if (tagEventsMap[tagName]) {
    var events = tagEventsMap[tagName];
    attrlist.forEach(function (name) {
      if (name.match(/^(on|@)/)) {
        var eventName = name.replace(/^(on|@)/, '');
        if (events.indexOf(eventName.toLowerCase()) < 0) {
          log.push({
            line: location.line || 1,
            column: location.col || 1,
            reason: 'ERROR: 组件 `' + tagName + '` 不支持事件 `' + eventName + '`'
          });
        }
      }
    });
  }

  // 检查子组件合法性
  if (childNodes.length > 0) {
    childNodes.forEach(function (child) {
      // 只有父组件和子组件均为保留标签时，才需要检测合法性
      if (isReservedTag(tagName) && isReservedTag(child.nodeName)) {
        var tagParents = tagParentsMap[child.nodeName];
        var tagChildren = tagChildrenMap[tagName];
        // 若子组件有parents属性，检查tagName是否为子组件合法的父组件；若父组件有children属性，检查child.nodeName是否为父组件合法的子组件
        if (tagParents && tagParents.indexOf(tagName) < 0 || tagChildren && tagChildren.indexOf(child.nodeName) < 0) {
          log.push({
            line: location.line || 1,
            column: location.col || 1,
            reason: 'ERROR: 组件 `' + tagName + '` 不支持子组件 `' + child.nodeName + '`'
          });
        }
      }
    });
  }
}

/**
 * 检测Id属性
 * @param id
 * @param output
 */
function checkId(id, output) {
  if (id) {
    output.result.id = _exp2.default.isExpr(id) ? (0, _exp2.default)(id) : id;
  }
}

/**
 * 检测构造模式
 * @param id
 * @param output
 */
function checkBuild(mode, output) {
  if (mode) {
    output.result.append = mode === 'tree' ? 'tree' : 'single';
  }
}

/**
 * 检测class属性
 * 'a b c' -> ['a', 'b', 'c']
 * 'a {{b}} c' -> function () {return ['a', this.b, 'c']}
 * @param className
 * @param output
 */
function checkClass(className, output) {
  var hasBinding = void 0;
  var tempClassList = void 0;
  var classList = [];
  var tempCode = void 0;

  className = className.trim();
  if (className) {
    tempClassList = className.split(' ');
    var expStart = -1;
    var expEnd = -1;
    tempClassList.forEach(function (subName, index) {
      if (subName.indexOf('{{') > -1 && subName.indexOf('}}') === -1) {
        expStart = index;
      } else if (expStart !== -1 && subName.indexOf('}}') > -1) {
        expEnd = index;
        classList.push(tempClassList.slice(expStart, expEnd + 1).join(''));
        expStart = -1;
        expEnd = -1;
      } else if (expStart === -1 && expEnd === -1 || subName.indexOf('{{') > -1 && subName.indexOf('}}') > -1) {
        classList.push(subName);
      }
    });

    classList = classList.map(function (subName) {
      if (_exp2.default.isExpr(subName)) {
        hasBinding = true;
        return (0, _exp2.default)(subName, false);
      }
      return '\'' + subName + '\'';
    });

    if (hasBinding) {
      tempCode = '(function () {return [' + classList.join(', ') + ']})';
      /* eslint-disable no-eval */
      output.result.classList = eval(tempCode);
      /* eslint-enable no-eval */
    } else {
      output.result.classList = classList.map(function (subName) {
        return subName.substr(1, subName.length - 2); // 去掉引号
      });
    }
  }
}

/**
 * 检查样式
 * '{{a}}' -->  function () { return this.a; }
 * 'b:{{v}};' --> {b: function() { return this.v; }}
 * @param cssText
 * @param output
 * @param locationInfo
 */
function checkStyle(cssText, output, locationInfo, options) {
  var style = {};
  var log = output.log;
  if (cssText) {
    if (_exp2.default.singleExpr(cssText)) {
      // 检测是否嵌套{{}}
      var incText = _exp2.default.removeExprffix(cssText);
      if (_exp2.default.isExpr(incText)) {
        log.push({
          line: locationInfo.line || 1,
          column: locationInfo.col || 1,
          reason: 'ERROR: style 属性不能嵌套多层{{}}'
        });
      } else {
        style = (0, _exp2.default)(cssText);
      }
      output.result.style = style;
      return;
    }
    // 如果是 a: {{}}; b: {{}};, 则分解处理
    cssText.split(';').forEach(function (declarationText) {
      var k = void 0,
          v = void 0,
          vResult = void 0;
      var pair = declarationText.trim().split(':');
      // 如果出现xxx:xxx:xxx的情况, 则将第一个:之后文本作为value
      if (pair.length > 2) {
        pair[1] = pair.slice(1).join(':');
        pair = pair.slice(0, 2);
      }
      if (pair.length === 2) {
        k = pair[0].trim();
        k = (0, _utils.hyphenedToCamelCase)(k);
        v = pair[1].trim();
        v = (0, _exp2.default)(v); // 处理值表达式
        vResult = _style2.default.validateDelaration(k, v, options);
        v = vResult.value;

        v.forEach(function (t) {
          // 如果校验成功，则保存转换后的属性值
          if ((0, _utils.isValidValue)(t.v) || typeof t.v === 'function') {
            style[t.n] = t.v;
          }
        });

        if (vResult.log) {
          log.push({
            line: locationInfo.line || 1,
            column: locationInfo.col || 1,
            reason: vResult.log.reason
          });
        }
      }
    });
    output.result.style = style;
  }
}

/**
 * 检查if语句
 * @param value
 * @param output
 * @param not 是否取反
 */
function checkIf(value, output, not, locationInfo, conditionList) {
  var log = output.log;
  if (value) {
    // 如果没有，补充上{{}}
    value = _exp2.default.addExprffix(value);

    if (not) {
      value = '{{' + buildConditionExp(conditionList) + '}}';
    } else {
      // if动作前需要清除conditionList之前的结构
      conditionList.length > 0 && (conditionList.length = 0);
      conditionList.push('' + value.substr(2, value.length - 4));
    }
    // 将表达式转换为function
    output.result.shown = (0, _exp2.default)(value);
  } else {
    if (!not) {
      log.push({
        line: locationInfo.line || 1,
        column: locationInfo.col || 1,
        reason: 'WARNING: if 属性为空'
      });
    }
  }
}

/**
 * 检查else语句
 * @param value
 * @param output
 * @param not
 */
function checkElse(value, output, locationInfo, conditionList) {
  checkIf(value, output, true, locationInfo, conditionList);
  // else动作之后需清除conditionList之前的结构
  conditionList.length = 0;
}

/**
 * 检查else if语句
 * @param value
 * @param output
 * @param not
 */
function checkElif(value, cond, output, locationInfo, conditionList) {
  var log = output.log;
  var newcond = cond;
  if (value) {
    // 如果没有，补充上{{}}
    value = _exp2.default.addExprffix(value);
    cond = _exp2.default.addExprffix(cond);

    newcond = '{{(' + value.substr(2, value.length - 4) + ') && ' + buildConditionExp(conditionList) + '}}';

    // 将表达式转换为function
    output.result.shown = (0, _exp2.default)(newcond);
    conditionList.push('' + value.substr(2, value.length - 4));
  } else {
    log.push({
      line: locationInfo.line || 1,
      column: locationInfo.col || 1,
      reason: 'WARNING: Elif 属性为空'
    });
  }
  return newcond;
}

/**
 * 检查循环
 * @param value
 * @param output
 */
function checkFor(value, output, locationInfo) {
  var log = output.log;
  if (value) {
    // 如果是单一表达式，去除{{}}
    value = _exp2.default.removeExprffix(value);

    // 如果是'key in values'的形式
    var key = void 0;
    var val = void 0;
    var inMatch = value.match(/(.*) (?:in) (.*)/);
    if (inMatch) {
      // 如果key是以'(key,value)'格式
      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
      if (itMatch) {
        key = itMatch[1].trim();
        val = itMatch[2].trim();
      } else {
        val = inMatch[1].trim();
      }
      value = inMatch[2];
    }
    value = '{{' + value + '}}';

    var repeat = void 0;
    if (!key && !val) {
      repeat = (0, _exp2.default)(value);
    } else {
      // 如果指定key,value
      repeat = { exp: (0, _exp2.default)(value) };
      if (key) {
        repeat.key = key;
      }
      if (val) {
        repeat.value = val;
      }
    }
    output.result.repeat = repeat;
  } else {
    log.push({
      line: locationInfo.line || 1,
      column: locationInfo.col || 1,
      reason: 'WARNING: for 属性为空'
    });
  }
}

/**
 * 检查事件属性
 * @param  {string} name  事件名以on开头
 * @param  {string} value
 * @param  {object} output{result, deps[], log[]}
 */
function checkEvent(name, value, output) {
  // 去除开头的'on'
  var eventName = name.replace(/^(on|@)/, '');
  if (eventName && value) {
    // 去除表达式的{{}}
    value = _exp2.default.removeExprffix(value);

    // 如果表达式形式为XXX(xxxx)
    var paramsMatch = value.match(/(.*)\((.*)\)/);
    if (paramsMatch) {
      var funcName = paramsMatch[1];
      var params = paramsMatch[2];
      // 解析','分隔的参数
      if (params) {
        params = params.split(/\s*,\s*/);
        // 如果参数中没有'$evt',则自动在末尾添加'$evt'
        if (params.indexOf('evt') === -1) {
          params[params.length] = 'evt';
        }
      } else {
        // 否则默认有一个参数'$evt'
        params = ['evt'];
      }
      value = '{{' + funcName + '(' + params.join(',') + ')}}';
      // 将事件转换为函数对象
      /* eslint-disable no-eval */
      value = eval('(function (evt) {' + (0, _exp2.default)(value, false).replace('this.evt', 'evt') + '})');
      /* eslint-enable no-eval */
    }
    output.result.events = output.result.events || {};
    output.result.events[eventName] = value;
  }
}

/**
 * @param  {string} name
 * @param  {string} value
 * @param  {object} output{result, deps[], log[]}
 * @param  {String} tagName
 * @param  {object} locationInfo{line, column}
 */
function checkAttr(name, value, output, tagName, locationInfo) {
  if (name && (0, _utils.isValidValue)(value)) {
    output.result.attr = output.result.attr || {};
    output.result.attr[(0, _utils.hyphenedToCamelCase)(name)] = (0, _exp2.default)(value);
    if (name === 'value' && tagName === 'text') {
      output.log.push({
        line: locationInfo.line,
        column: locationInfo.column,
        reason: 'WARNING: `value` 应该写在<text>标签中'
      });
    }
  }
}

/**
 * 是否为保留标签
 */
function isReservedTag(tag) {
  return tagReserved.indexOf(tag) > -1;
}

/**
 * 是否为包含text内容的原子组件
 */
function isTextContentAomtic(tag) {
  return tagTextCotent.indexOf(tag) > -1 && tagAtomics.indexOf(tag) > -1;
}

/**
 * 判断标签是否支持span
 * @param tag
 */
function isSupportSpan(tag) {
  if (!tag || typeof tag !== 'string') {
    return;
  }
  return tagChildrenMap[tag] && tagChildrenMap[tag].indexOf('span') > -1;
}

/**
 * 获取标签支持的子节点
 * @param tag
 * @returns {*|Array}
 */
function getTagChildren(tag) {
  if (!tag || typeof tag !== 'string') {
    return;
  }
  return tagChildrenMap[tag] || [];
}

/**
 *判断标签是否支持自闭合
 * @param tag
 */
function isSupportedSelfClosing(tag) {
  if (!tag || typeof tag !== 'string') {
    return;
  }
  tag = tagAliasMap[tag] || tag;
  return tagNatives[tag] && !!tagNatives[tag].selfClosing;
}

/**
 * 输出条件取反的字符串表示
 * @param list
 * @return {string}
 */
function buildConditionExp(list) {
  return list.map(function (exp) {
    return '!(' + exp + ')';
  }).join(' && ');
}

exports.default = {
  checkTagName: checkTagName,
  checkId: checkId,
  checkClass: checkClass,
  checkStyle: checkStyle,
  checkIf: checkIf,
  checkElse: checkElse,
  checkElif: checkElif,
  checkFor: checkFor,
  checkEvent: checkEvent,
  checkAttr: checkAttr,
  checkBuild: checkBuild,
  isReservedTag: isReservedTag,
  isTextContentAomtic: isTextContentAomtic,
  isSupportSpan: isSupportSpan,
  getTagChildren: getTagChildren,
  isSupportedSelfClosing: isSupportedSelfClosing
};