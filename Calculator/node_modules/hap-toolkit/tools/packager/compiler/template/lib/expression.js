/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */
'use strict';

// 表达式中允许的关键字

var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');

// 表达式中不能包含的关键字
var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');

var wsRE = /\s/g;
var newlineRE = /\n/g;
var saveRE = /[{,]\s*[\w$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*")|new |typeof |void /g;
var restoreRE = /"(\d+)"/g;
var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
var identRE = /[^\w$.](?:[A-Za-z_$][\w$]*)/g;
var booleanLiteralRE = /^(?:true|false)$/;

var saved = [];

/**
 * 将目标字符串替换为索引
 * @param str
 * @param isString
 * @returns {string}
 */
function save(str, isString) {
  var i = saved.length;
  saved[i] = isString ? str.replace(newlineRE, '\\n') // 回车转变为'\\n'
  : str;
  return '"' + i + '"';
}

/**
 * 将之前save的数字转换为字符串
 * @param {String} raw
 * @return {String}
 */
function rewrite(raw) {
  var c = raw.charAt(0);
  var path = raw.slice(1);
  if (allowedKeywordsRE.test(path)) {
    return raw;
  } else {
    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
    return c + 'this.' + path;
  }
}

/**
 * 获取save字符串
 * @param str
 * @param i
 * @returns {*}
 */
function restore(str, i) {
  return saved[i];
}

/**
 * 编译表达式, 添加this前缀
 * @param {String} exp
 * @return {Function}
 */
function compileGetter(exp) {
  /* istanbul ignore if */
  if (improperKeywordsRE.test(exp)) {
    console.warn('### App Toolkit ### 不要在表达式中使用保留关键字: ' + exp);
  }
  // 重置状态
  saved.length = 0;
  // 处理表达式
  var body = exp.replace(saveRE, save).replace(wsRE, ''); // 剔除空格/分隔符
  // 生成新表达式
  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
  return body.trim();
}

/**
 * 解析表达式
 * @param {String} exp
 * @return {String}
 */
function parseExpression(exp) {
  exp = exp.trim();
  var res = isSimplePath(exp) && exp.indexOf('[') < 0 ? 'this.' + exp // 简单表达式, 直接添加this即可
  : compileGetter(exp); // 复杂表达式, 需要遍历处理
  return res;
}

/**
 * 检查表达式简单路径
 * @param {String} exp
 * @return {Boolean}
 */
function isSimplePath(exp) {
  return pathTestRE.test(exp) &&
  // true/false
  !booleanLiteralRE.test(exp) &&
  // Math常量
  exp.slice(0, 5) !== 'Math.';
}

module.exports = {
  parseExpression: parseExpression
};