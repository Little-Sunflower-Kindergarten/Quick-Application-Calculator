'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*
opyright (C) 2017, hapjs.org. All rights reserved.


var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _compiler = require('../../compiler');

var _info = require('../../common/info');

var _utils = require('../../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (source, inputSourceMap) {
  var _this = this;

  this.cacheable && this.cacheable();
  var callback = this.async();

  // 获取query参数
  var loaderQuery = _loaderUtils2.default.parseQuery(this.query);
  var resourceQuery = _loaderUtils2.default.parseQuery(this.resourceQuery) || {};

  var type = loaderQuery.type;
  var uxType = resourceQuery.uxType;
  var resourcePath = this.resourcePath;

  // 解析数字索引
  var index = loaderQuery.index;
  if (index != null && index.match(/^\d+$/)) {
    index = parseInt(index);
  }

  Promise.resolve((0, _compiler.parseFragmentsWithCache)(source, resourcePath)[type]).then(function (result) {
    if (index != null) {
      result = result[index];
    }
    // 节点的文本内容
    var content = result.content.trim();

    // 启用测试环境，并且是入口文件，并且是脚本
    if (type === _utils.FRAG_TYPE.SCRIPT && (0, _utils.isUXEntry)(uxType) && process.env['NODE_TEST'] === 'Y') {
      // 加载与脚本文件同路径test文件夹下的测试用例
      if (resourcePath.match(/src\/app\./)) {
        // 向app脚本注入测试框架
        content = 'import \'../node_modules/' + _info.moduleName + '/tools/packager/common/app.js\'\n ' + content;
      } else {
        // 向页面脚本注入

        // 替换路径与后缀名
        var fileCasePath = resourcePath.replace('/src/', '/test/').replace(/\.\w{2,5}$/, '.js');
        if (_fs2.default.existsSync(fileCasePath)) {
          // 关联测试用例
          var fileCaseRelativePath = fileCasePath.match(/\/test\/(.*)/)[1];
          // 引用地址
          content = '\nimport fnTestCase from \'' + fileCaseRelativePath + '\'\n' + content;
          // 关联脚本
          content = content.replace('export default {', 'export default {\n    onCreate () {\n      // \u5141\u8BB8back\u88AB\u5916\u90E8\u8986\u76D6\n      if (this._options._descriptor) {\n        this._options._descriptor[\'back\'] = {access: \'public\'}\n      }\n\n      // \u6D4B\u8BD5\u6267\u884C\uFF1A\u5F00\u59CB\u65F6\u95F4\uFF0C\u7ED3\u675F\u4E8B\u4EF6\n      global.CASE_TEST_START = global.CASE_TEST_START || 1000\n      global.CASE_TEST_TIMEOUT = global.CASE_TEST_TIMEOUT || 2000\n\n      global.mocha = new Mocha({ reporter: \'json\', timeout: global.CASE_TEST_TIMEOUT })\n      mocha.ui(\'bdd\')\n      mocha.suite.emit(\'pre-require\', global, null, mocha);\n      setTimeout(function() {\n        // \u8BB0\u5F55\u6D4B\u8BD5\u7528\u4F8B\n        typeof fnTestCase === \'function\' && fnTestCase(this)\n        var mochaRunner = mocha.run(function () {\n          if (mochaRunner) {\n            // \u6807\u9898\n            mochaRunner.testResults.stats.title = mocha.suite.suites && mocha.suite.suites[0] && mocha.suite.suites[0].title\n            console.info(\'testResults: \', JSON.stringify(mochaRunner.testResults))\n            pushData(\'pageTestList\', mochaRunner.testResults)\n\n            // \u663E\u793A\u7ED3\u679C\n            const stats = mochaRunner.testResults.stats\n            this.$page.setTitleBar({ text: `\u901A\u8FC7/\u5168\u90E8: ${stats.passes}/${stats.tests}` })\n          }\n\n          // \u662F\u5426\u8FD4\u56DE\n          if (this.back !== \'false\') {\n            console.info(\'\u62E5\u6709\u5173\u8054\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u6D4B\u8BD5\u5B8C\u6BD5\uFF0C\u8FD4\u56DE\u5230\u4E4B\u524D\u7684\u9875\u9762\')\n            history.back()\n          }\n        }.bind(this))\n      }.bind(this), global.CASE_TEST_START)\n    },');
          _utils.colorconsole.info('[INFO] \u811A\u672C\u6CE8\u5165\u6D4B\u8BD5\u7528\u4F8B\uFF1A' + fileCaseRelativePath);
        } else {
          // 不关联测试用例
          content = content.replace('export default {', 'export default {\n    onCreate () {\n      // \u5141\u8BB8back\u88AB\u5916\u90E8\u8986\u76D6\n      if (this._options._descriptor) {\n        this._options._descriptor[\'back\'] = {access: \'public\'}\n      }\n\n      // \u6D4B\u8BD5\u6267\u884C\uFF1A\u5F00\u59CB\u65F6\u95F4\uFF0C\u7ED3\u675F\u4E8B\u4EF6\n      global.CASE_TEST_START = global.CASE_TEST_START || 1000\n      global.CASE_TEST_TIMEOUT = global.CASE_TEST_TIMEOUT || 2000\n\n      setTimeout(function() {\n        // \u662F\u5426\u8FD4\u56DE\n        if (this.back !== \'false\') {\n          console.info(\'\u6CA1\u6709\u5173\u8054\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5230\u4E4B\u524D\u7684\u9875\u9762\')\n          history.back()\n        }\n      }.bind(this), global.CASE_TEST_START)\n    },');
        }
      }
    }

    // 只有js文件生成map
    var map = void 0;
    if (_this.sourceMap && (type === _utils.FRAG_TYPE.SCRIPT || type === _utils.FRAG_TYPE.IMPORT)) {
      var contentLineStart = result.location.line;

      var cmap = void 0;
      if (inputSourceMap) {
        cmap = (0, _utils.consumeMap)(_this, source, inputSourceMap);
        source = cmap.sourcesContent.join('');
      }

      var iterator = (0, _utils.splitSourceLine)(content).map(function (input, line) {
        line = line + 1;
        var originalLine = line + contentLineStart;
        var generatedLine = line;
        if (cmap) {
          // 映射到原始代码
          originalLine = cmap.mapping['line-' + originalLine + '-column-0'].line;
        }
        return {
          original: {
            line: originalLine,
            column: 0
          },
          generated: {
            line: generatedLine,
            column: 0
          }
        };
      });

      map = (0, _utils.generateMap)(_this, source, iterator);
    }

    return [content, map];
  }).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        content = _ref2[0],
        map = _ref2[1];

    callback(null, content, map && map.toJSON() || inputSourceMap);
  }).catch(function (e) {
    callback(e, '');
  });
};