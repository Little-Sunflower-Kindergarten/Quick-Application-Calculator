/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseFragmentsWithCache = parseFragmentsWithCache;
exports.parseTemplate = parseTemplate;
exports.parseStyle = parseStyle;
exports.parseScript = parseScript;

var _parse = require('parse5');

var _parse2 = _interopRequireDefault(_parse);

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

var _style = require('./style');

var _style2 = _interopRequireDefault(_style);

var _script = require('./script');

var _script2 = _interopRequireDefault(_script);

var _utils = require('../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 格式化节点
 * @param source
 * @param node
 */
function _formatFragment(source, node) {
  var start = void 0,
      end = void 0,
      line = void 0,
      column = void 0;
  var attrs = {};

  // 获取当前节点在文档中的位置信息
  if (node.__location) {
    var __location = node.__location;
    if (__location.startTag && __location.endTag) {
      start = __location.startTag.endOffset || 0;
      end = __location.endTag.startOffset || 0;
    } else {
      start = __location.startOffset || 0;
      end = __location.endOffset || 0;
    }
    line = __location.line;
    column = __location.col;
  }
  /* istanbul ignore else */
  else {
      start = end = line = column = 0;
    }

  if (node.attrs && node.attrs.length) {
    node.attrs.forEach(function (item) {
      attrs[item.name] = item.value;
    });
  }

  return {
    type: node.nodeName,
    attrs: attrs, // 节点属性值
    content: source.substring(start, end), // 节点的文本内容
    location: {
      start: start,
      end: end,
      line: line,
      column: column
    }
  };
}

/**
 * 解析片段
 * @param source
 */
function parseFragments(source) {
  var frags = {
    import: [], // 导入组件
    template: [], // 模板
    style: [], // 样式
    script: [] // 脚本
  };
  var fragment = _parse2.default.parseFragment(source, {
    treeAdapter: _parse2.default.treeAdapters.default,
    locationInfo: true
  });

  // 存储片段解析结果
  fragment.childNodes.forEach(function (node) {
    frags[node.nodeName] && frags[node.nodeName].push(_formatFragment(source, node));
  });

  return frags;
}

// 片段缓存
var fragsCache = new Map();

/**
 * 解析片段,优先从缓存中获取
 * @param source
 * @param filePath
 */
function parseFragmentsWithCache(source, filePath) {
  if (!fragsCache.has(filePath) || fragsCache.get(filePath).source !== source) {
    // 解析并缓存片段
    fragsCache.set(filePath, {
      source: source,
      frags: parseFragments(source)
    });
  }

  return fragsCache.get(filePath).frags;
}

/**
 * 解析模板
 * @param source
 * @returns {Promise}
 */
function parseTemplate(source) {
  return new Promise(function (resolve, reject) {
    _template2.default.parse(source, function (err, obj) {
      if (err) {
        reject(err);
      } else {
        var parsed = (0, _utils.serialize)(obj.jsonTemplate, 2);
        resolve({ parsed: parsed, log: obj.log });
      }
    });
  });
}

/**
 * 解析CSS
 * @param source
 * @returns {Promise}
 */
function parseStyle(source) {
  return new Promise(function (resolve, reject) {
    _style2.default.parse(source, function (err, _ref) {
      var jsonStyle = _ref.jsonStyle,
          depList = _ref.depList,
          log = _ref.log;

      if (err) {
        reject(err);
      } else {
        var parsed = JSON.stringify(jsonStyle, null, 2);
        resolve({ parsed: parsed, depList: depList, log: log });
      }
    });
  });
}

/**
 * 解析脚本
 * @param source
 * @returns {Promise}
 */
function parseScript(source) {
  return new Promise(function (resolve, reject) {
    var parsed = _script2.default.fix(source);
    resolve({ parsed: parsed });
  });
}