'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FRAG_TYPE = exports.UX_TYPE = exports.colorconsole = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*
                                                                                                                                                                                                                                                                               * Copyright (C) 2017, hapjs.org. All rights reserved.
                                                                                                                                                                                                                                                                               */

exports.extend = extend;
exports.merge = merge;
exports.hyphenedToCamelCase = hyphenedToCamelCase;
exports.camelCaseToHyphened = camelCaseToHyphened;
exports.getNameByPath = getNameByPath;
exports.getFileNameWithHash = getFileNameWithHash;
exports.isEmptyObject = isEmptyObject;
exports.isPlainObject = isPlainObject;
exports.loadBabelModule = loadBabelModule;
exports.getFilenameByPath = getFilenameByPath;
exports.serialize = serialize;
exports.logWarn = logWarn;
exports.makeRequireString = makeRequireString;
exports.stringifyLoaders = stringifyLoaders;
exports.generateMap = generateMap;
exports.consumeMap = consumeMap;
exports.mkdirsSync = mkdirsSync;
exports.splitSourceLine = splitSourceLine;
exports.print = print;
exports.splitAttr = splitAttr;
exports.isValidValue = isValidValue;
exports.equals = equals;
exports.resolvePath = resolvePath;
exports.getWebpackOptions = getWebpackOptions;
exports.isUXRender = isUXRender;
exports.isUXEntry = isUXEntry;
exports.collectResFile = collectResFile;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _hashSum = require('hash-sum');

var _hashSum2 = _interopRequireDefault(_hashSum);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sourceMap = require('source-map');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * 扩展对象属性
 * @param dest
 * @param src
 */
function extend(target) {
  for (var _len = arguments.length, src = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    src[_key - 1] = arguments[_key];
  }

  if (typeof Object.assign === 'function') {
    Object.assign.apply(Object, [target].concat(src));
  } else {
    var first = src.shift();
    // 覆盖旧值
    for (var key in first) {
      target[key] = first[key];
    }
    if (src.length) {
      extend.apply(undefined, [target].concat(src));
    }
  }
  return target;
}

/**
 * 合并数组属性
 * @param dest
 * @param src
 */
function merge(target) {
  for (var _len2 = arguments.length, src = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    src[_key2 - 1] = arguments[_key2];
  }

  if (src.length) {
    src.forEach(function (item) {
      target = target.concat(item);
    });
  }
  return target;
}

/**
 * -xxx-xxx转换为XxxXxx
 * @param value
 * @returns {void|string|XML|*}
 */
function hyphenedToCamelCase(value) {
  return value.replace(/-([a-z])/g, function (s, m) {
    return m.toUpperCase();
  });
}

/**
 * XxxXxx转换为-xxx-xxx
 * @param value
 * @returns {void|string|XML|*}
 */
function camelCaseToHyphened(value) {
  return value.replace(/([A-Z])/g, function (s, m) {
    return '-' + m.toLowerCase();
  });
}

/**
 * 从文件路径中获取最后一部分（文件名(不包含扩展名)或目录名）
 * @param resourcePath
 * @returns {XML|void|string|*}
 */
function getNameByPath(resourcePath) {
  return _path2.default.basename(resourcePath).replace(/\..*$/, '');
}

/**
 * 生成带hash的文件名（'./filename?xxxxxxxxxx）,hash由文件内容生成
 * @param resourcePath
 * @param content
 * @returns {string}
 */
function getFileNameWithHash(resourcePath, content) {
  var filename = _path2.default.relative('.', resourcePath);
  var cacheKey = (0, _hashSum2.default)(filename + content);
  return './' + filename + '?' + cacheKey;
}

/**
 * 判断对象是否为空（没有任何属性）
 * @param e
 * @returns {boolean}
 */
function isEmptyObject(obj) {
  if (!obj) {
    return !0;
  }
  /* eslint-disable no-unused-vars */
  for (var t in obj) {
    return !1;
  }
  /* eslint-enable no-unused-vars */
  return !0;
}

/**
 * 判断是否为对象
 */
var toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject(obj) {
  return toString.call(obj) === OBJECT_STRING;
}

/**
 * 转换babel模块名
 * @param moduleName
 * @returns {*}
 */
function loadBabelModule(moduleName) {
  // 从当前js所在目录或者当前工作目录查找指定模块，没有找到则返回模块名
  var currentModulePath = _path2.default.resolve(__dirname, '..', 'node_modules', moduleName);
  // 当前运行目录
  var pwdModulePath = _path2.default.resolve(process.cwd(), 'node_modules', moduleName);
  if (_fs2.default.existsSync(currentModulePath)) {
    return currentModulePath;
  } else if (_fs2.default.existsSync(pwdModulePath)) {
    return pwdModulePath;
  }
  return moduleName;
}

/**
 * 转换为相对路径
 * @param filepath
 * @returns {*}
 */
function getFilenameByPath(filepath) {
  return _path2.default.relative('.', filepath);
}

/**
 * 可序列化包含函数的的数据
 *
 * @param {*} target - 转换对象
 * @param {Number | String} [space] - JSON.stringify 的第三个参数
 * @returns {String}
 */
function serialize(target, space) {
  var functions = [];
  var id = -1;
  var PLACEHOLDER = '__FKS_' + Math.random().toString(16).slice(2, 10) + '_FKE__';
  var type = typeof target === 'undefined' ? 'undefined' : _typeof(target);
  if (type === 'undefined') {
    return target;
  }
  if (type === 'function') {
    return target.toString();
  }
  // 检查占位符，确保不会出现“碰撞”
  // 将函数的 key 也计入检查
  var origin = JSON.stringify(target, function (key, value) {
    return typeof value === 'function' ? '' : value;
  });
  while (origin.indexOf(PLACEHOLDER) > -1) {
    PLACEHOLDER = '_' + PLACEHOLDER + '_';
  }
  var code = JSON.stringify(target, function (key, value) {
    if (typeof value === 'function') {
      functions.push(value);
      id++;
      return '[' + (PLACEHOLDER + id) + ']';
    }
    return value;
  }, space);

  var offset = -1;
  var holder = void 0;
  // 依次替换占位符，且是向前搜索的
  // 不会受到函数内占位符的影响
  functions.forEach(function (func, id) {
    // 补上"[, ]"
    holder = '"[' + (PLACEHOLDER + id) + ']"';
    offset = code.indexOf(holder, offset);
    if (offset > -1) {
      code = code.slice(0, offset) + func.toString() + code.slice(offset + holder.length);
    }
    // 逻辑上应加上 4 ("[, ]" 的长度)，但 __FKS_ 长度已超过 4，故可省去
    offset += func.toString().length;
  });
  return code;
}

/**
 * 打印日志
 * @param loader
 * @param logs
 * @param suppresslog
 */
function logWarn(loader, logs, suppresslog) {
  if (logs && logs.length) {
    logs.forEach(function (log) {
      var logAddr = log.line && log.column ? '\t@' + log.line + ':' + log.column : '';
      if (suppresslog) return;
      if (log.reason.startsWith('ERROR')) {
        colorconsole.error(loader.context, log.reason + logAddr);
      } else {
        colorconsole.warn(loader.context, log.reason + logAddr);
      }
    });
  }
}

/**
 * 生成require代码
 * @param loaderContext
 * @param loader
 * @param filepath
 * @returns {string}
 */
function makeRequireString(loaderContext, loader, filepath) {
  print({
    loader: loader,
    filepath: filepath
  });

  // 如果有loader则拼接请求请求字符串，否则直接使用原始文件名
  return 'require(' + _loaderUtils2.default.stringifyRequest(loaderContext, loader ? '!!' + loader + '!' + filepath : '' + filepath) + ')\n';
}

/**
 * 生成Loader请求字符串：loader?query!loader?query
 * @param loaders
 */
function stringifyLoaders(loaders) {
  return loaders.map(function (loader) {
    if (typeof loader === 'string') {
      // 如果已经是字符串，则不用转换
      return loader;
    } else {
      var name = loader.name; // 加载器名称
      var query = [];
      if (loader.query) {
        // 处理query字段
        for (var k in loader.query) {
          var v = loader.query[k];
          if (v != null) {
            if (v === true) {
              query.push(k);
            } else {
              if (v instanceof Array) {
                query.push(k + '[]=' + v.join(','));
              }
              query.push(k + '=' + v);
            }
          }
        }
      }
      return '' + name + (query.length ? '?' + query.join('&') : '');
    }
  }).join('!');
}

/**
 *
 * @param loader
 * @param source
 * @param iterator
 * @returns {*}
 */
function generateMap(loader, source, iterator) {
  var filePath = loader.resourcePath;

  var fileNameWithHash = getFileNameWithHash(filePath);
  var sourceRoot = _path2.default.resolve('.');

  var map = new _sourceMap.SourceMapGenerator({
    sourceRoot: sourceRoot,
    skipValidation: true
  });
  map.setSourceContent(fileNameWithHash, source);

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;
      var original = _ref.original;
      var generated = _ref.generated;

      map.addMapping({
        source: fileNameWithHash,
        original: original,
        generated: generated
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return map;
}

/**
 *
 * @param loader
 * @param target
 * @param map
 * @returns {{source: *, original: Array, generated: Array, mapping: {}, sourcesContent}}
 */
function consumeMap(loader, target, map) {
  var smc = new _sourceMap.SourceMapConsumer(map);
  var source = void 0;
  var original = [];
  var generated = [];
  var mapping = {};

  splitSourceLine(target).forEach(function (input, line) {
    var column = 0;
    line = line + 1;

    var pos = smc.originalPositionFor({
      line: line,
      column: column
    });

    if (pos.source) {
      source = pos.source;
      original.push({
        line: pos.line,
        column: pos.column
      });
      generated.push({
        line: line,
        column: column
      });
      mapping['line-' + line + '-column-' + column] = {
        line: pos.line,
        column: pos.column
      };
    }
  });

  return {
    source: source,
    original: original,
    generated: generated,
    mapping: mapping,
    sourcesContent: smc.sourcesContent
  };
}

/**
 * @param dirname
 * @returns {boolean}
 */
function mkdirsSync(dirname) {
  if (_fs2.default.existsSync(dirname)) {
    return true;
  } else {
    if (mkdirsSync(_path2.default.dirname(dirname))) {
      _fs2.default.mkdirSync(dirname);
      return true;
    }
  }
}

/**
 * 根据回车换行分割源代码
 * @type {RegExp}
 */
var REGEXP_LINE = /\r?\n/g; // 回车换行
function splitSourceLine(source) {
  return source.split(REGEXP_LINE);
}

/**
 * 打印日志
 * @param str
 */
var showLog = false;
function print(log) {
  if (showLog) {
    var str = '';
    if (typeof log === 'string') {
      str = '######### ' + log + ' #########';
    } else {
      for (var i in log) {
        str += '######### ' + i + ' : ' + log[i] + ' #########\n';
      }
    }
    console.log(str);
  }
}

/**
 * 拆分上下左右类型的简写属性
 * @param names   属性名数组
 * @param values  属性值数组
 * @returns {array}
 */
function splitAttr(names, values) {
  var resultArray = [];
  if (values) {
    names.forEach(function (n, idx) {
      resultArray[idx] = {};
      resultArray[idx].n = n;
    });

    switch (values.length) {
      case 1:
        names.forEach(function (n, idx) {
          resultArray[idx].v = values[0];
        });
        break;
      case 2:
        names.forEach(function (n, idx) {
          if (idx % 2) {
            resultArray[idx].v = values[1];
          } else {
            resultArray[idx].v = values[0];
          }
        });
        break;
      case 3:
        names.forEach(function (n, idx) {
          if (idx % 2) {
            resultArray[idx].v = values[1];
          } else {
            resultArray[idx].v = values[idx];
          }
        });
        break;
      default:
        names.forEach(function (n, idx) {
          resultArray[idx].v = values[idx];
        });
    }
  }
  return resultArray;
}

/**
 * 值的有效性检验
 * @param value  值
 */
function isValidValue(value) {
  return typeof value === 'number' || typeof value === 'string';
}

var logLevelMap = {};

function prependLevel(levelName, args) {
  !logLevelMap[levelName] && function (levelNameInner) {
    var logLevel = levelNameInner.toUpperCase().substr(0, 4);
    logLevel.paddEnd && logLevel.paddEnd(4);
    logLevelMap[levelName] = logLevel;
  }(levelName);

  if (typeof args[0] === 'string' && args[0].length > 1 && args[0][0] !== '[') {
    args[0] = '[' + logLevelMap[levelName] + '] ' + args[0];
  }
}

/**
 * 规范日志
 */
var colorconsole = exports.colorconsole = {
  trace: function trace() {
    var _console;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    prependLevel('trace', args);
    (_console = console).trace.apply(_console, _toConsumableArray(args));
  },
  log: function log() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    prependLevel('log', args);
    console.log(_chalk2.default.green.apply(_chalk2.default, _toConsumableArray(args)));
  },
  info: function info() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    prependLevel('info', args);
    console.info(_chalk2.default.green.apply(_chalk2.default, _toConsumableArray(args)));
  },
  warn: function warn() {
    var _chalk$yellow;

    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    prependLevel('warn', args);
    console.warn((_chalk$yellow = _chalk2.default.yellow).bold.apply(_chalk$yellow, _toConsumableArray(args)));
  },
  error: function error() {
    var _chalk$red;

    for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    prependLevel('error', args);
    console.error((_chalk$red = _chalk2.default.red).bold.apply(_chalk$red, _toConsumableArray(args)));
  },
  throw: function _throw() {
    var _chalk$red2;

    throw new Error((_chalk$red2 = _chalk2.default.red).bold.apply(_chalk$red2, arguments));
  }
};

/**
 * 比较两个对象是否相同
 * @param o1
 * @param o2
 * @param fn {Function} 对比函数
 */
function equals(o1, o2, fn) {
  if (fn) {
    for (var _len8 = arguments.length, args = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
      args[_key8 - 3] = arguments[_key8];
    }

    var fnRet = fn.apply(undefined, [o1, o2].concat(args));
    if (fnRet) {
      return true;
    }
  }

  var toStr1 = Object.prototype.toString.call(o1);
  var toStr2 = Object.prototype.toString.call(o2);

  if (toStr1 !== toStr2) {
    return false;
  }
  if (toStr1 === '[object Null]' || toStr1 === '[object Undefined]') {
    return true;
  }
  if (toStr1 !== '[object Object]' && toStr1 !== '[object Array]') {
    return Object(o1).toString() === Object(o2).toString();
  }

  var keyMap = {};
  Object.keys(o1).forEach(function (k) {
    return keyMap[k] = true;
  });
  Object.keys(o2).forEach(function (k) {
    return keyMap[k] = true;
  });
  var keyList = Object.keys(keyMap);

  for (var i = 0; i < keyList.length; i++) {
    var keyName = keyList[i];
    var isEqual = equals(o1[keyName], o2[keyName], fn, keyName);
    if (!isEqual) {
      return false;
    }
  }
  return true;
}

/**
 * @param relativePath
 * @param filePath
 * @returns {*}
 * @desc 将文件相对路径转为项目根目录('src/')下的绝对路径
 */
function resolvePath(relativePath, filePath) {
  if (filePath && !_path2.default.isAbsolute(relativePath)) {
    var absolutePath = _path2.default.join(_path2.default.dirname(filePath), relativePath);
    var relativeProjectPath = _path2.default.relative(_path2.default.resolve('.', './src'), absolutePath);
    relativePath = _path2.default.join('/', relativeProjectPath);
  }
  return relativePath;
}

/**
 * 获取webpack的配置对象
 * @desc options参数虽不推荐使用，亦可以使用其它方式
 * @param loader
 */
function getWebpackOptions(loader) {
  return loader.options || {};
}

/**
 * 是否需要渲染
 * @param type
 * @returns {boolean}
 */
function isUXRender(type) {
  return type === UX_TYPE.PAGE;
}

/**
 * 是否是入口
 * @param type
 * @returns {boolean}
 */
function isUXEntry(type) {
  return type === UX_TYPE.PAGE || type === UX_TYPE.APP;
}

/**
 * 收集静态资源文件
 * @param fs 文件系统
 * @param srcDir 源文件目录
 * @param buildDir 编译后的目录
 * @param resouce 收集的资源文件
 * @param dir 子目录
 * @param common 是否是common
 */
function collectResFile(fs, srcDir, buildDir, excludeExt) {
  var dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '.';
  var common = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

  var directory = _path2.default.join(srcDir, dir);
  var resources = {};
  var name = void 0;
  // 递归遍历目录
  fs.readdirSync(directory).forEach(function (file) {
    var fullpath = _path2.default.join(directory, file);
    var stat = fs.statSync(fullpath);
    var basename = _path2.default.basename(fullpath);
    var extname = _path2.default.extname(fullpath);
    if (stat.isFile()) {
      if (basename === 'manifest.json' || excludeExt.indexOf(extname) < 0) {
        // 资源文件
        name = _path2.default.join(buildDir, dir, _path2.default.basename(file));
        name = name.replace(/\\/g, '/');
        resources[name] = fullpath;
      }
    } else if (stat.isDirectory()) {
      var subdir = _path2.default.join(dir, file);
      var iscommon = common || file.toLowerCase() === 'common';
      Object.assign(resources, collectResFile(fs, srcDir, buildDir, excludeExt, subdir, iscommon));
    }
  });

  return resources;
}

/**
 * ux文件的类型
 */
var UX_TYPE = exports.UX_TYPE = {
  APP: 'app',
  PAGE: 'page',
  COMP: 'comp'

  /**
   * 片段的类型
   */
};var FRAG_TYPE = exports.FRAG_TYPE = {
  IMPORT: 'import',
  TEMPLATE: 'template',
  STYLE: 'style',
  SCRIPT: 'script'
};